{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/maupassant/source/css/copycode.css","path":"css/copycode.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/copyright.css","path":"css/copyright.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/dark.css","path":"css/dark.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/search.css","path":"css/search.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/copyright.js","path":"js/copyright.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/copycode.js","path":"js/copycode.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/love.js","path":"js/love.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/Java/JDK-JRE-JVM.md","hash":"98d4a30deed4e6c6fa83ba81a49b95874b4b6125","modified":1633264894539},{"_id":"source/_posts/Java/Java-String.md","hash":"96830fc52778387fc9e5699a1ef7ad55fb1773ee","modified":1633264894539},{"_id":"source/_posts/Java/Java内存.md","hash":"1de40549d7607b6001660831c7307dc2541f44f1","modified":1633264894539},{"_id":"source/_posts/Java/Java概述.md","hash":"6fcede31375ff9b0ffa5c8d9142260bf431cd9d2","modified":1633264894539},{"_id":"source/_posts/Java/Java注释.md","hash":"7a7e995013722df2f25bee9c5e32595c27ede6d1","modified":1633264894539},{"_id":"source/_posts/Java/Java跨平台原理.md","hash":"b234ba46d9f298dcdaa8235fe2f06c8120e7f366","modified":1633264894540},{"_id":"source/_posts/Java/Java程序运行流程.md","hash":"2fb8d5aa1375b7d06ccaf4a152fb03a1b8241166","modified":1633264894540},{"_id":"source/_posts/Java/Java类.md","hash":"75d36c5e05375677c42acb7cba3a0f725cbef56a","modified":1633264894540},{"_id":"source/_posts/Java/关键字、标识符.md","hash":"4e54f59aaf81d65ad888a55eb28056f9840725da","modified":1633264894540},{"_id":"source/_posts/Java/多线程.md","hash":"5016f8e87a272da4794f3e1343f168ea8a50abfe","modified":1633264894541},{"_id":"source/_posts/Java/数据类型.md","hash":"abc8356d9ccc6125feee70ce2bebdc629073f1a8","modified":1633264894541},{"_id":"source/_posts/Java/数组.md","hash":"9d2b4403d1124f7103e42424ce958d93311cf53c","modified":1633267905298},{"_id":"source/_posts/Java/流程控制.md","hash":"55310ece867d3b87abaec2edf6f9f90a4ee06f37","modified":1633264894541},{"_id":"source/_posts/Java/继承.md","hash":"82ffded7120188128c9c423a53794c364e1e7e60","modified":1633855380786},{"_id":"source/_posts/Java/运算符.md","hash":"292ec6a26de9343065fffee3bd6ec443df2eaf5f","modified":1633264894541},{"_id":"source/_posts/Linux/Linux常用命令总结.md","hash":"d0809b875144252245dc283ebac94d5111f8e9e7","modified":1633264894542},{"_id":"source/_posts/blogTutorial/Markdown指南.md","hash":"2143f56140c592a315ab58fe98f85610b1e546a6","modified":1633264894542},{"_id":"source/_posts/blogTutorial/博客搭建.md","hash":"b184888d87dfb6f61c50ff5633dbc0b9ab2c7d39","modified":1633264894543},{"_id":"source/_posts/module/redis.md","hash":"3922fd997864b1dbfef52896b3a518bfe865f910","modified":1633264894543},{"_id":"source/_posts/codeStyle/代码规范.md","hash":"a0d2313f593b8d65bc6e8d2ac2f8c204c9c41d9e","modified":1633264894543},{"_id":"source/_posts/toolApplication/IDEA指南.md","hash":"47a2866ac70ee1d9d08c8ed1136ab9c7d95f249d","modified":1633854494244},{"_id":"source/_posts/toolApplication/mac使用记录.md","hash":"fcbcaf86f79aff3b5fecef963efb7ea769f5d0a7","modified":1633264894544},{"_id":"themes/maupassant/.gitignore","hash":"16945417d10c15c950306794dbb0d970b5a199fe","modified":1629826585549},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1629826585549},{"_id":"themes/maupassant/LICENSE","hash":"f0ac2f92770650c9835183f79010c0d307b34acd","modified":1629826585549},{"_id":"themes/maupassant/README.md","hash":"08a3499122e10a8fd8e0a75dcd4cce0125e8c98d","modified":1629826585550},{"_id":"themes/maupassant/_config.yml","hash":"23c610d12ae42e1d3aa84b110fc8f79644587f8c","modified":1630225748697},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1629826585550},{"_id":"themes/maupassant/package.json","hash":"f092433469eb87362e831326425a6a5c3c9fea0d","modified":1629826585560},{"_id":"themes/maupassant/languages/en.yml","hash":"9c979a2f107536399bbe2be572c2d0bebcdd9d95","modified":1629826585551},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1629826585551},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1629826585551},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1629826585551},{"_id":"themes/maupassant/languages/ru.yml","hash":"2476a631f4d3c668de04af85a6c2c97ba2a57e96","modified":1629826585552},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"e9747f9b3ec1314a3cae44a9a90e7649af739633","modified":1629826585552},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"78cc1794a3ce3e186c462c1a70f097d0c05cd210","modified":1629826585552},{"_id":"themes/maupassant/layout/archive.pug","hash":"749028e57a2eaad8c92ce2a2426c98605ab746a7","modified":1629826585558},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"80995eadfd89ee9aa36f4672f8d405e03f13af15","modified":1629826585558},{"_id":"themes/maupassant/layout/base.pug","hash":"a226db456b92c9e8611a8bfda07818e6c3d13dd5","modified":1629826585559},{"_id":"themes/maupassant/layout/index.pug","hash":"162fe3fa695e8bea5a77916aefbb7ce98cd227bf","modified":1629826585559},{"_id":"themes/maupassant/layout/page.pug","hash":"a285a76950bb1b91f482ef9c473472bd0ede601d","modified":1629826585559},{"_id":"themes/maupassant/layout/post.pug","hash":"c0113056cbcfbba79867835ba364a37d9ccd3cfb","modified":1629826585560},{"_id":"themes/maupassant/layout/single-column.pug","hash":"0593f261dc208bb0b5c4232eb41eff597a291bd9","modified":1629826585560},{"_id":"themes/maupassant/layout/tagcloud.pug","hash":"4aa57b41e919a12b6d7691cd4a36d3a531b55fcb","modified":1629826585560},{"_id":"themes/maupassant/layout/timeline.pug","hash":"84fbfc92ccdf291b491140d89557553141a5d3f9","modified":1629826585560},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"aefb67bac8fcef9cb3027f8622923b392f79f51e","modified":1629826585553},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"ee41abc4fe1610293ef4958275c41c9423d68105","modified":1629826585553},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"650781b5bc8c632658ad6880ba663b1e3bfb5798","modified":1629826585553},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"51881cde4653f00e9d0de68fb9c201b52b100b9e","modified":1629826585553},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1629826585554},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1629826585554},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1629826585554},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1629826585554},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1629826585555},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"53d721ea4c93564cb0bdde065572ff6128574d36","modified":1629826585555},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1629826585555},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"b3c846a2e0ac79933e32c343029b769f2865a27f","modified":1629826585556},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1629826585556},{"_id":"themes/maupassant/layout/_widget/copyright.pug","hash":"32701dcba9c52d4bc73badaf8afe91af3f87b6a0","modified":1629826585556},{"_id":"themes/maupassant/layout/_widget/donate.pug","hash":"50855ce17af4298ce0f15236e2308c4a1760e7e3","modified":1629826585557},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"c45aa7ec00158579e58f1f8dfd890447bb5e5e54","modified":1629826585557},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"1ef7a333ab9bfa169276d0ad48aecf5166ab63cb","modified":1629826585557},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"19431336d724d2118e46da43683bce9063176541","modified":1629826585557},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6e8e4123cca38840c4607c1a056205972b82bb7b","modified":1629826585558},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1629826585558},{"_id":"themes/maupassant/source/css/copycode.css","hash":"e2463b8dacf629e180a1b6cd80667ca8044292eb","modified":1629826585561},{"_id":"themes/maupassant/source/css/copyright.css","hash":"a418da11a88d1feb14500df42ed97a64da6a7611","modified":1629826585561},{"_id":"themes/maupassant/source/css/dark.css","hash":"0faf42a84e243032b736c5f06ddbb95ac69e779c","modified":1629826585562},{"_id":"themes/maupassant/source/css/donate.css","hash":"95b2fd65042afecc0b5530847c369bcc11d74bd0","modified":1629826585562},{"_id":"themes/maupassant/source/css/style.scss","hash":"2435d3536b35a259e3eaca850292c1aa48cc8673","modified":1629826585563},{"_id":"themes/maupassant/source/css/search.css","hash":"9406e138d7bb6a9ef4a067eba1dafa627519c8a7","modified":1629826585562},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1629826585564},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1629826585564},{"_id":"themes/maupassant/source/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1629826585564},{"_id":"themes/maupassant/source/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1629826585565},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1629826585565},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1629826585565},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1629826585566},{"_id":"themes/maupassant/source/js/copyright.js","hash":"7b1bd775ea22abf33d57f78628f436bf656e439a","modified":1629826585566},{"_id":"themes/maupassant/source/js/copycode.js","hash":"fde1f153bab1f00ae8930668094c00aa9ff3c7a3","modified":1629826585566},{"_id":"themes/maupassant/source/js/donate.js","hash":"bdddd8d9847462d020f7a511e7e12c046223195d","modified":1629826585567},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1629826585567},{"_id":"themes/maupassant/source/js/love.js","hash":"5cf89f622bf891cf1986845eb92eadef6f358eb7","modified":1629826585567},{"_id":"themes/maupassant/source/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1629826585568},{"_id":"themes/maupassant/source/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1629826585567},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1629826585568},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1629826585568},{"_id":"public/2021/10/10/Java/继承/index.html","hash":"7f5cb163be14fa35443a028667867228d4d44c6d","modified":1633914631625},{"_id":"public/2021/09/25/Java/Java-String/index.html","hash":"fb0010f579f8be07b889a267dc3d48e0f1cbb60a","modified":1633914631625},{"_id":"public/2021/09/25/Java/Java类/index.html","hash":"a6d5db7ceddc5cdbedbc57edb15c7c28eb7c8189","modified":1633914631625},{"_id":"public/2021/09/25/toolApplication/mac使用记录/index.html","hash":"bd8ffc2ded8fbed503a09dcd3d23e1b773ed2bb1","modified":1633914631625},{"_id":"public/2021/09/09/module/redis/index.html","hash":"ee7cebb799aa3148de9e17efccd5a21d88dffc59","modified":1633914631625},{"_id":"public/2021/09/09/Linux/Linux常用命令总结/index.html","hash":"1dd76defb74dea0f7a182a5490157952a4761d60","modified":1633914631625},{"_id":"public/2021/08/31/Java/多线程/index.html","hash":"befd05f1bd552630f09752412839888a2e3e0978","modified":1633914631625},{"_id":"public/2021/08/31/Java/数组/index.html","hash":"09e4c88f31961192d77b0f2896b6cced9e8a0cd8","modified":1633914631625},{"_id":"public/2021/08/31/toolApplication/IDEA指南/index.html","hash":"b8ec823935c83392608a50f250e78aa5b3583852","modified":1633914631625},{"_id":"public/2021/08/30/Java/流程控制/index.html","hash":"f83898f394a1601134ee351ea554f73e0f45f512","modified":1633914631625},{"_id":"public/2021/08/27/Java/运算符/index.html","hash":"b53e14ff5bc145aaf9d5a8c89c4ec9e9271ecfb5","modified":1633914631625},{"_id":"public/2021/08/27/blogTutorial/Markdown指南/index.html","hash":"e511c13c9eccc2b333a5674797da22b39b7b0a37","modified":1633914631625},{"_id":"public/2021/08/26/codeStyle/代码规范/index.html","hash":"624d2f5770a1427106102beb9d3453f64bc7433f","modified":1633914631625},{"_id":"public/2021/08/26/Java/关键字、标识符/index.html","hash":"6bfad24719ea775f70e6c0ff5ddd8d4d6a6eb0ab","modified":1633914631625},{"_id":"public/2021/08/26/Java/数据类型/index.html","hash":"3eabd422c8b03a98253bb9d4ad5b6cc687eccc9a","modified":1633914631625},{"_id":"public/2021/08/25/Java/Java注释/index.html","hash":"ea67772afaf7e47d0f4b6081ad16dfe8ad22361c","modified":1633914631625},{"_id":"public/2021/08/25/Java/Java程序运行流程/index.html","hash":"297489cd32ee57c0285e4029b3732192db7b4fd1","modified":1633914631625},{"_id":"public/2021/08/24/blogTutorial/博客搭建/index.html","hash":"e7750a8dfe392236a0a5159eb2cc48464baea0b6","modified":1633914631625},{"_id":"public/2021/08/21/Java/JDK-JRE-JVM/index.html","hash":"63a43ba6af0cf2fdcf9f5e1e25706e9dc7915509","modified":1633914631625},{"_id":"public/2021/08/21/Java/Java跨平台原理/index.html","hash":"876f182eb66eeffd785da938b2553e7f731218ad","modified":1633914631625},{"_id":"public/2021/08/21/Java/Java概述/index.html","hash":"664def86ca9901a485994d1bd6976d4ab84f30da","modified":1633914631625},{"_id":"public/categories/Java/index.html","hash":"c0ab99bad1fbe299edc674efc1e0ca62214c575b","modified":1633914631625},{"_id":"public/categories/Java/page/2/index.html","hash":"087b6de65114468aaadc73393755afdcfbde9fbf","modified":1633914631625},{"_id":"public/categories/Linux/index.html","hash":"a1a8a9d815290058321bc0cc6b05e8e09a7702f7","modified":1633914631625},{"_id":"public/categories/组件/index.html","hash":"48039b24bcdda0b25ae9f79805017c150241e839","modified":1633914631625},{"_id":"public/categories/博客搭建/index.html","hash":"7fc58acf71fc39bd18282721880378d6dd8218ed","modified":1633914631625},{"_id":"public/categories/代码规范/index.html","hash":"125019b28b0b900240ee4c21fce144def9034458","modified":1633914631625},{"_id":"public/categories/mac使用技巧/index.html","hash":"20af606c3d91267aad1de0b193c248256f241371","modified":1633914631625},{"_id":"public/categories/工具应用/index.html","hash":"cb77381f03e8250ed9b62602c129a7e68a16b442","modified":1633914631625},{"_id":"public/archives/index.html","hash":"579f7b6664bda31ba18fb76b35fd61628e1dee4e","modified":1633914631625},{"_id":"public/archives/page/2/index.html","hash":"c81c0b5417578dc73253862730210855e92f222f","modified":1633914631625},{"_id":"public/archives/page/3/index.html","hash":"0a775ecb5aaf4bdbdaf258a91b78946cf2236e52","modified":1633914631625},{"_id":"public/archives/2021/index.html","hash":"e3caa51519ebe9d0332f40d2ba6b4f6ad2d38a68","modified":1633914631625},{"_id":"public/archives/2021/page/2/index.html","hash":"ad67929b977534bd2247d2d61c87826a068fe741","modified":1633914631625},{"_id":"public/archives/2021/page/3/index.html","hash":"c288e9fa51487313487de3ddcf84ffd015bb3daf","modified":1633914631625},{"_id":"public/archives/2021/08/index.html","hash":"d7066883959ca6abde2b932cd889ee83a0b3d2fc","modified":1633914631625},{"_id":"public/archives/2021/08/page/2/index.html","hash":"230b8a41acd82a6f6fbb2ce08b471c974ca47d0a","modified":1633914631625},{"_id":"public/archives/2021/09/index.html","hash":"bc534cbb8b0ca3d04a5e57a9847d459f0a3e42b0","modified":1633914631625},{"_id":"public/archives/2021/10/index.html","hash":"66282840e18c7dc925e09c0fe23aa867ab93d9b4","modified":1633914631625},{"_id":"public/page/2/index.html","hash":"9d7a3b6c6423392331767ed3bd8bd1985412cfff","modified":1633914631625},{"_id":"public/index.html","hash":"20c9e1ec4c6618e1a5e10bee0c75de8b3ddb0a0d","modified":1633914631625},{"_id":"public/page/3/index.html","hash":"49d7ebdbd1d4e1029d19095c67485ff6c3602c76","modified":1633914631625},{"_id":"public/tags/编程/index.html","hash":"5430eff22d5b9f7f52d7bf65015163fc1e1505fc","modified":1633914631625},{"_id":"public/tags/编程/page/2/index.html","hash":"5d5112353c1493c57a559cb317c99b6dcc13468a","modified":1633914631625},{"_id":"public/tags/电脑使用技巧/index.html","hash":"5318da39d1eda3a39c18b6b143209180ecee31ca","modified":1633914631625},{"_id":"public/tags/博客搭建/index.html","hash":"7fc58acf71fc39bd18282721880378d6dd8218ed","modified":1633914631625},{"_id":"public/2021/08/31/Java/Java内存/index.html","hash":"57507cffa306e2c2501a95b2d686bf9f272d8233","modified":1633914631625},{"_id":"public/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1633914631625},{"_id":"public/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1633914631625},{"_id":"public/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1633914631625},{"_id":"public/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1633914631625},{"_id":"public/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1633914631625},{"_id":"public/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1633914631625},{"_id":"public/css/copycode.css","hash":"e2463b8dacf629e180a1b6cd80667ca8044292eb","modified":1633914631625},{"_id":"public/css/copyright.css","hash":"a418da11a88d1feb14500df42ed97a64da6a7611","modified":1633914631625},{"_id":"public/css/dark.css","hash":"0faf42a84e243032b736c5f06ddbb95ac69e779c","modified":1633914631625},{"_id":"public/css/donate.css","hash":"95b2fd65042afecc0b5530847c369bcc11d74bd0","modified":1633914631625},{"_id":"public/css/search.css","hash":"9406e138d7bb6a9ef4a067eba1dafa627519c8a7","modified":1633914631625},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1633914631625},{"_id":"public/js/donate.js","hash":"bdddd8d9847462d020f7a511e7e12c046223195d","modified":1633914631625},{"_id":"public/js/copyright.js","hash":"7b1bd775ea22abf33d57f78628f436bf656e439a","modified":1633914631625},{"_id":"public/js/copycode.js","hash":"fde1f153bab1f00ae8930668094c00aa9ff3c7a3","modified":1633914631625},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1633914631625},{"_id":"public/js/love.js","hash":"5cf89f622bf891cf1986845eb92eadef6f358eb7","modified":1633914631625},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1633914631625},{"_id":"public/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1633914631625},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1633914631625},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1633914631625},{"_id":"public/css/style.css","hash":"b62c7a610e82d973f8363daabf77cdd878323fa2","modified":1633914631625}],"Category":[{"name":"Java","_id":"ckulyl2zr0004wx6qen38d6sb"},{"name":"Linux","_id":"ckulyl30g001bwx6q12z61l9m"},{"name":"博客搭建","_id":"ckulyl30j001kwx6q6a68artd"},{"name":"组件","_id":"ckulyl30n001xwx6q5wdz30s3"},{"name":"代码规范","_id":"ckulyl30o0021wx6q3rg4dgf7"},{"name":"mac使用技巧","_id":"ckulyl30o0024wx6q7clp7e36"},{"name":"工具应用","_id":"ckulyl30p0026wx6q7qlm628n"}],"Data":[],"Page":[],"Post":[{"title":"Java-String","date":"2021-09-25T09:26:30.000Z","_content":"\n## String\n* 特点：\n    * 效果上相当于字符数组（char[]），实际上底层原理是字节数组（byte[]）\n\n## 构造方法\n* 不同构造方法特点\n    * 使用\"\"方法创建的对象实际指向的是同一个内存地址\n    * 使用new创建的对象即时字符换内容相同，对象指向的内存地址也不同\n    \n## 字符串比较\n* ==（实际都是比较变量保存的值是否相同）\n    * 基本数据类型是比较值\n    * 引用类型比较的是地址值\n    \n## StringBuilder\n* 特点：\n    * 去掉字符串拼接过程中构造新对象的行为（解决浪费内存空间且耗时的问题）\n    * 内容可变\n    ","source":"_posts/Java/Java-String.md","raw":"---\ntitle: Java-String\ndate: 2021-09-25 17:26:30\ntags: 编程\ncategories:\n- [Java]\n---\n\n## String\n* 特点：\n    * 效果上相当于字符数组（char[]），实际上底层原理是字节数组（byte[]）\n\n## 构造方法\n* 不同构造方法特点\n    * 使用\"\"方法创建的对象实际指向的是同一个内存地址\n    * 使用new创建的对象即时字符换内容相同，对象指向的内存地址也不同\n    \n## 字符串比较\n* ==（实际都是比较变量保存的值是否相同）\n    * 基本数据类型是比较值\n    * 引用类型比较的是地址值\n    \n## StringBuilder\n* 特点：\n    * 去掉字符串拼接过程中构造新对象的行为（解决浪费内存空间且耗时的问题）\n    * 内容可变\n    ","slug":"Java/Java-String","published":1,"updated":"2021-10-03T12:41:34.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl2zf0000wx6qddy2dyie","content":"<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><ul>\n<li>特点：<ul>\n<li>效果上相当于字符数组（char[]），实际上底层原理是字节数组（byte[]）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h2><ul>\n<li>不同构造方法特点<ul>\n<li>使用””方法创建的对象实际指向的是同一个内存地址</li>\n<li>使用new创建的对象即时字符换内容相同，对象指向的内存地址也不同</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"字符串比较\"><a href=\"#字符串比较\" class=\"headerlink\" title=\"字符串比较\"></a>字符串比较</h2><ul>\n<li>==（实际都是比较变量保存的值是否相同）<ul>\n<li>基本数据类型是比较值</li>\n<li>引用类型比较的是地址值</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"StringBuilder\"><a href=\"#StringBuilder\" class=\"headerlink\" title=\"StringBuilder\"></a>StringBuilder</h2><ul>\n<li>特点：<ul>\n<li>去掉字符串拼接过程中构造新对象的行为（解决浪费内存空间且耗时的问题）</li>\n<li>内容可变</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><ul>\n<li>特点：<ul>\n<li>效果上相当于字符数组（char[]），实际上底层原理是字节数组（byte[]）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h2><ul>\n<li>不同构造方法特点<ul>\n<li>使用””方法创建的对象实际指向的是同一个内存地址</li>\n<li>使用new创建的对象即时字符换内容相同，对象指向的内存地址也不同</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"字符串比较\"><a href=\"#字符串比较\" class=\"headerlink\" title=\"字符串比较\"></a>字符串比较</h2><ul>\n<li>==（实际都是比较变量保存的值是否相同）<ul>\n<li>基本数据类型是比较值</li>\n<li>引用类型比较的是地址值</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"StringBuilder\"><a href=\"#StringBuilder\" class=\"headerlink\" title=\"StringBuilder\"></a>StringBuilder</h2><ul>\n<li>特点：<ul>\n<li>去掉字符串拼接过程中构造新对象的行为（解决浪费内存空间且耗时的问题）</li>\n<li>内容可变</li>\n</ul>\n</li>\n</ul>\n"},{"title":"JDK&JRE&JVM","date":"2021-08-21T10:03:06.000Z","_content":"\n* JDK（Java Development Kit：开发Java程序）：\n  * JRE（Java Runtime Environment：运行Java程序）：\n    * JVM（Java Virtual Machine：实现Java程序跨平台运行）\n    * 运行时需要的核心类库\n  * 开发人员工具\n    * 编译工具（javac.exe）\n    * 运行工具（java.exe）\n","source":"_posts/Java/JDK-JRE-JVM.md","raw":"---\ntitle: JDK&JRE&JVM\ndate: 2021-08-21 18:03:06\ntags: 编程\ncategories:\n- [Java]\n---\n\n* JDK（Java Development Kit：开发Java程序）：\n  * JRE（Java Runtime Environment：运行Java程序）：\n    * JVM（Java Virtual Machine：实现Java程序跨平台运行）\n    * 运行时需要的核心类库\n  * 开发人员工具\n    * 编译工具（javac.exe）\n    * 运行工具（java.exe）\n","slug":"Java/JDK-JRE-JVM","published":1,"updated":"2021-10-03T12:41:34.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl2zm0001wx6qc1ux50ua","content":"<ul>\n<li>JDK（Java Development Kit：开发Java程序）：<ul>\n<li>JRE（Java Runtime Environment：运行Java程序）：<ul>\n<li>JVM（Java Virtual Machine：实现Java程序跨平台运行）</li>\n<li>运行时需要的核心类库</li>\n</ul>\n</li>\n<li>开发人员工具<ul>\n<li>编译工具（javac.exe）</li>\n<li>运行工具（java.exe）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>JDK（Java Development Kit：开发Java程序）：<ul>\n<li>JRE（Java Runtime Environment：运行Java程序）：<ul>\n<li>JVM（Java Virtual Machine：实现Java程序跨平台运行）</li>\n<li>运行时需要的核心类库</li>\n</ul>\n</li>\n<li>开发人员工具<ul>\n<li>编译工具（javac.exe）</li>\n<li>运行工具（java.exe）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Java内存详解","date":"2021-08-31T03:14:46.000Z","_content":"\n## 内存区域、内存模型\n* 内存区域：即运行时数据区域，指JVM对于不同类型数据在内存中的存储方式\n* 内存模型（JMM：Java Memory Model）：定义了线程与主内存之间的抽象关系，即JVM在内存中的工作方式，即JVM使用内存区域中的数据的方式\n\n## JDK8之后的内存区域：\n```\n* Native Method Stacks（本地方法栈）\n* Program Counter Register（程序计数器）\n* Java Virtual Machine Stacks（JVM Stacks，即虚拟机栈）\n    * Stack Frame（栈帧）\n        * 局部变量表\n        * 操作栈\n        * 动态连接\n        * 方法返回地址\n    * Stack Frame（栈帧）\n        * 局部变量表\n        * 操作栈\n        * 动态连接\n        * 方法返回地址\n* Heap（堆区）\n    * Young区（新生代）\n        * Eden\n        * S0\n        * S1\n    * Old区（老年代）\n* Method Area（方法区）\n    * Runtime Constant Pool（运行时常量池）\n    * 方法元信息\n    * klass类元信息\n* CodeCache（JIT编译产物） \n```\n\n### Program Counter Register (程序计数器)\n* 作用：当前线程所执行的字节码的行号指示器，当多线程切换时，使线程恢复后找到正确的执行位置\n* 特点：\n    * 内存占用少\n    * 线程私有\n    * 当前线程执行Java方法，计数器保存虚拟机中字节码指令地址；执行Native方法，记录null\n    * 唯一一个在JVM规范中没有规定OutOfMemoryError的区域\n   \n### JVM Stacks\n* 概念：\n    * 活动线程：当前正在执行的线程\n    * 当前帧：正在执行的方法对应的栈帧，由于只有栈顶帧有效，所以当前帧也是栈顶帧\n    * 当前方法：正在执行的方法\n* 简介：描述了Java方法执行的内存模型，每个方法在执行时都会创建一个栈帧（Stack Frame：栈中的一个元素，方法运行时的基础数据结构），存储局部变量表，操作数栈、动态连接、方法出口等。每一个方法从调用到执行完的过程，对应一个栈帧入栈出栈过程\n* 作用：保存Java方法执行的时候需要的各种数据、参数\n* 特点：\n    * 线程私有\n    * 生命周期与线程相同\n    * 执行引擎运行时，所有指令都只能对当前帧操作\n    * 一个方法对应一个栈帧\n* 组成：\n    * #### Stack Frame（栈帧）：\n        * 介绍：一个栈帧对应一个方法执行需要的数据\n        * JVM规定的与栈帧相关异常：\n            * 线程请求的栈深度大于JVM允许的深度，抛出StackOverflowError\n            * 对于当前大多数可以拓展的JVM栈，在拓展时申请不到足够内存，抛出OutOfMemoryError\n        * 组成：\n            * #### 局部变量表\n                * 作用：存放方法参数和局部变量，字节码指令中的STORE指令就是将操作栈中计算完成局部变量写到当前帧的局部变量表中\n                * 特点：\n                    * 必须显示初始化，才能使用\n                    * 如果是非静态方法，会在index[0]位置存储方法所属对象的实例引用，占用4字节，后面存储方法参数和局部变量\n            * #### 操作栈\n                * 作用：用于方法执行过程中信息的存取\n                * 简介：JVM的执行引擎是基于栈的执行引擎，其中的栈即操作栈，方法执行时，使用操作栈进行存取信息\n                * 关联：\n                    * 字节码指令集即基于栈类型，栈深度保存在方法元信息的栈属性中\n                    * 例：\n                        * ++i：总体思路是按顺序执行，先将局部变量表中的i执行加1操作（load memory&add&store memory），然后放到操作栈中(load memory)，此时从操作栈栈顶取出的i就是加1之后的\n                        * i++：按照按顺序执行的思路，先将i放到操作栈中(load memory)，然后执行加1的操作(add memory)，加1之后的值更新到局部变量表中(store memory)，此时从栈顶读取到的i未加1，所以如果多线程操作i的时候，可能从局部变量表读到的i比预期的小\n                * 特点：\n                    * 初始状态为空桶式结构栈\n            * #### 动态连接\n                * 介绍：每个栈帧中包含一个在常量池中对当前方法的引用，目的是为了支持方法调用过程的动态连接\n            * #### 方法返回地址：\n                * 方法执行退出情况：\n                    * 正常退出，遇到返回字节码指令，比如return、ireturn、areturn\n                    * 异常退出\n                * 介绍：即方法调用完成返回的位置，方法调用完成后会弹出当前栈帧\n                * 退出后行为：\n                    * 返回值压入上层调用栈帧 \n                    * 异常抛给能处理的栈帧\n                    * 程序计数器指向方法调用后的下一条指令    \n        \n### Native Method Stacks(本地方法栈)\n* 介绍：与JVM Stacks类似，但保存的是Native方法对应的栈帧\n* 特点：\n    * 也会抛出StackOverFlowError和OutOfMemoryError\n    * 线程调用本地方法时，不受JVM约束\n    * 本地方法通过JNI(Java Native Interface)来访问JVM的数据，可以调用寄存器，具有JVM相同的能力、权限\n    * 大量本地方法运行时，会削弱JVM对系统控制力，本地方法出错信息比较黑盒\n    * 本地方法栈会在内存不足时抛出NativeHeapOutOfMemory\n\n### Heap（堆）\n* 介绍：存放对象实例，几乎所有的对象实例都在这里分配内存\n* 特点：\n    * 对大多数应用来说，Heap是JVM管理内存中最大的一块\n    * 被所有线程共享\n    * 虚拟机启动时创建\n    * GC管理的主要区域，有时候也成Heap为GC Heap\n    * 内部可能包含多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB）\n    * 可以由物理上不连续的内存空间组成，只要逻辑上连续即可\n    * 当堆中无内存完成实例分配，并且无法拓展时，会抛出OutOfMemoryError\n* 按照GC中的分代回收算法分类：\n    * 新生代\n        * Eden\n        * S0\n        * S1\n    * 老年代 \n            \n### Metaspace（元数据区）\n* 组成：\n    * #### Method Area（方法区）\n        * 特点：\n            * 线程共享\n            * 存储被JVM加载的类信息、常量、静态变量、即时编译器编译后的代码等数据\n            * JVM对该区域限制非常松，可选择不实现垃圾回收\n            * 垃圾回收在该区域出现少，主要是回收运行时常量池和类元信息\n            * 当方法区无法满足内存分配需求时，抛出OutOfMemoryError\n    * #### Runtime Constant Pool（运行时常量池）\n        * 作用：\n            * 用于存放编译器生成的各种字面量、符号引用、翻译出来的直接引用\n        * 特点：\n            * 具备动态性，非编译期也可以产生常量，运行期间可以将常量放入池中，例如String的intern() 方法\n            * 当申请不到新内存时，抛出OutOfMemoryError\n            \n### 直接内存\n* 作用：\n    * 用于避免Java堆与native对来回复制数据，提高某些场景的性能\n* 特点：\n    * 非虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域\n    * 基于通道（Channel）与缓冲区（Buffer）的I/O方式，可以使用Native函数库直接分配堆外内存，然后通过一个存储在java堆中的DirectByteBuffer对象作为这块内存的引用来操作\n    * 动态拓展时申请不到足够内存会抛出OutOfMemoryError\n    \n## Java Memory Model（java内存模型）\n* 作用：\n    * 控制线程之间的通信，决定一个线程对共享变量的写入何时对另一个线程可见\n    * 定义程序中各个变量的访问规则\n* 特点：\n    * 共享内存的并发模型，线程之间通过读写共享变量（堆内存中的实例域、静态域、数组元素）来完成隐式通信\n    * 所有变量都存储在主内存中，每条线程有自己的私有内存，也叫工作内存，线程对变量的操作必须在工作内存中进行，不能直接操作主内存中的变量，工作内存中存储了变量副本\n    * 属于语言级的内存模型，在不同的编译器、处理器上，通过禁止特定类型的编译器重排序和处理器重排序（指令级并行重排序、内存系统重排序），确保为程序员提供一致的内存可见性\n\n## 重排序\n* 作用：\n    * 编译器和处理器为了提高性能，会对指令重排序\n* 分类：\n    * 编译器优化的重排序：\n        * 编译器在不改变程序语义的情况下，可以重排语句执行顺序\n    * 指令级并行的重排序：\n        * 现代处理器提供了指令级并行技术来将多条指令并行执行，如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序\n    * 内存系统的重排序：\n        * 由于处理器使用了缓存和读写缓冲区，使加载和存储操作看上去是在乱序执行\n* 从Java源代码到执行指令序列：\n    * 源代码 > 编译器优化重排序 > 指令级重排序 > 内存系统重排序 > 最终执行的指令序列        \n* Java进制处理器重排序方式：\n    * 生成指令序列的内存屏障，即重排序时不能把内存屏障指令重排到之前来实现的\n \n## happens-before\n* 作用：\n    * 描述操作之间的内存可见性（可见性：指当一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的）\n* 特点：\n    * JDK5出现\n    * 如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在 happens-before 关系。这里提到的两个操作既可以是在一个线程之内，也可以是在不同线程之间\n* 重要的 happens-before 规则如下：\n    * 程序顺序规则：一个线程中的每个操作，happens- before 于该线程中的任意后续操作。\n    * 监视器锁规则：对一个监视器锁的解锁，happens- before 于随后对这个监视器锁的加锁。\n    * volatile 变量规则：对一个 volatile 域的写，happens- before 于任意后续对这个 volatile 域的读。\n    * 传递性：如果 A happens- before B，且 B happens- before C，那么 A happens- before C。\n   \n## volatile\n* 作用：\n    * 保持变量的修改在多个线程间是同步的\n* 特点：\n    * 保证变量对所有线程都是可见的\n    * volatile变量在并发情况下由于Java的非原子化操作导致线程不安全，synchronized由于统一时间内只能由一个线程操作，所以是线程安全的\n    * 禁止指令重排序优化\n    \n\n    \n\n","source":"_posts/Java/Java内存.md","raw":"---\ntitle: Java内存详解\ndate: 2021-08-31 11:14:46\ntags: 编程\ncategories:\n- [Java]\n---\n\n## 内存区域、内存模型\n* 内存区域：即运行时数据区域，指JVM对于不同类型数据在内存中的存储方式\n* 内存模型（JMM：Java Memory Model）：定义了线程与主内存之间的抽象关系，即JVM在内存中的工作方式，即JVM使用内存区域中的数据的方式\n\n## JDK8之后的内存区域：\n```\n* Native Method Stacks（本地方法栈）\n* Program Counter Register（程序计数器）\n* Java Virtual Machine Stacks（JVM Stacks，即虚拟机栈）\n    * Stack Frame（栈帧）\n        * 局部变量表\n        * 操作栈\n        * 动态连接\n        * 方法返回地址\n    * Stack Frame（栈帧）\n        * 局部变量表\n        * 操作栈\n        * 动态连接\n        * 方法返回地址\n* Heap（堆区）\n    * Young区（新生代）\n        * Eden\n        * S0\n        * S1\n    * Old区（老年代）\n* Method Area（方法区）\n    * Runtime Constant Pool（运行时常量池）\n    * 方法元信息\n    * klass类元信息\n* CodeCache（JIT编译产物） \n```\n\n### Program Counter Register (程序计数器)\n* 作用：当前线程所执行的字节码的行号指示器，当多线程切换时，使线程恢复后找到正确的执行位置\n* 特点：\n    * 内存占用少\n    * 线程私有\n    * 当前线程执行Java方法，计数器保存虚拟机中字节码指令地址；执行Native方法，记录null\n    * 唯一一个在JVM规范中没有规定OutOfMemoryError的区域\n   \n### JVM Stacks\n* 概念：\n    * 活动线程：当前正在执行的线程\n    * 当前帧：正在执行的方法对应的栈帧，由于只有栈顶帧有效，所以当前帧也是栈顶帧\n    * 当前方法：正在执行的方法\n* 简介：描述了Java方法执行的内存模型，每个方法在执行时都会创建一个栈帧（Stack Frame：栈中的一个元素，方法运行时的基础数据结构），存储局部变量表，操作数栈、动态连接、方法出口等。每一个方法从调用到执行完的过程，对应一个栈帧入栈出栈过程\n* 作用：保存Java方法执行的时候需要的各种数据、参数\n* 特点：\n    * 线程私有\n    * 生命周期与线程相同\n    * 执行引擎运行时，所有指令都只能对当前帧操作\n    * 一个方法对应一个栈帧\n* 组成：\n    * #### Stack Frame（栈帧）：\n        * 介绍：一个栈帧对应一个方法执行需要的数据\n        * JVM规定的与栈帧相关异常：\n            * 线程请求的栈深度大于JVM允许的深度，抛出StackOverflowError\n            * 对于当前大多数可以拓展的JVM栈，在拓展时申请不到足够内存，抛出OutOfMemoryError\n        * 组成：\n            * #### 局部变量表\n                * 作用：存放方法参数和局部变量，字节码指令中的STORE指令就是将操作栈中计算完成局部变量写到当前帧的局部变量表中\n                * 特点：\n                    * 必须显示初始化，才能使用\n                    * 如果是非静态方法，会在index[0]位置存储方法所属对象的实例引用，占用4字节，后面存储方法参数和局部变量\n            * #### 操作栈\n                * 作用：用于方法执行过程中信息的存取\n                * 简介：JVM的执行引擎是基于栈的执行引擎，其中的栈即操作栈，方法执行时，使用操作栈进行存取信息\n                * 关联：\n                    * 字节码指令集即基于栈类型，栈深度保存在方法元信息的栈属性中\n                    * 例：\n                        * ++i：总体思路是按顺序执行，先将局部变量表中的i执行加1操作（load memory&add&store memory），然后放到操作栈中(load memory)，此时从操作栈栈顶取出的i就是加1之后的\n                        * i++：按照按顺序执行的思路，先将i放到操作栈中(load memory)，然后执行加1的操作(add memory)，加1之后的值更新到局部变量表中(store memory)，此时从栈顶读取到的i未加1，所以如果多线程操作i的时候，可能从局部变量表读到的i比预期的小\n                * 特点：\n                    * 初始状态为空桶式结构栈\n            * #### 动态连接\n                * 介绍：每个栈帧中包含一个在常量池中对当前方法的引用，目的是为了支持方法调用过程的动态连接\n            * #### 方法返回地址：\n                * 方法执行退出情况：\n                    * 正常退出，遇到返回字节码指令，比如return、ireturn、areturn\n                    * 异常退出\n                * 介绍：即方法调用完成返回的位置，方法调用完成后会弹出当前栈帧\n                * 退出后行为：\n                    * 返回值压入上层调用栈帧 \n                    * 异常抛给能处理的栈帧\n                    * 程序计数器指向方法调用后的下一条指令    \n        \n### Native Method Stacks(本地方法栈)\n* 介绍：与JVM Stacks类似，但保存的是Native方法对应的栈帧\n* 特点：\n    * 也会抛出StackOverFlowError和OutOfMemoryError\n    * 线程调用本地方法时，不受JVM约束\n    * 本地方法通过JNI(Java Native Interface)来访问JVM的数据，可以调用寄存器，具有JVM相同的能力、权限\n    * 大量本地方法运行时，会削弱JVM对系统控制力，本地方法出错信息比较黑盒\n    * 本地方法栈会在内存不足时抛出NativeHeapOutOfMemory\n\n### Heap（堆）\n* 介绍：存放对象实例，几乎所有的对象实例都在这里分配内存\n* 特点：\n    * 对大多数应用来说，Heap是JVM管理内存中最大的一块\n    * 被所有线程共享\n    * 虚拟机启动时创建\n    * GC管理的主要区域，有时候也成Heap为GC Heap\n    * 内部可能包含多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB）\n    * 可以由物理上不连续的内存空间组成，只要逻辑上连续即可\n    * 当堆中无内存完成实例分配，并且无法拓展时，会抛出OutOfMemoryError\n* 按照GC中的分代回收算法分类：\n    * 新生代\n        * Eden\n        * S0\n        * S1\n    * 老年代 \n            \n### Metaspace（元数据区）\n* 组成：\n    * #### Method Area（方法区）\n        * 特点：\n            * 线程共享\n            * 存储被JVM加载的类信息、常量、静态变量、即时编译器编译后的代码等数据\n            * JVM对该区域限制非常松，可选择不实现垃圾回收\n            * 垃圾回收在该区域出现少，主要是回收运行时常量池和类元信息\n            * 当方法区无法满足内存分配需求时，抛出OutOfMemoryError\n    * #### Runtime Constant Pool（运行时常量池）\n        * 作用：\n            * 用于存放编译器生成的各种字面量、符号引用、翻译出来的直接引用\n        * 特点：\n            * 具备动态性，非编译期也可以产生常量，运行期间可以将常量放入池中，例如String的intern() 方法\n            * 当申请不到新内存时，抛出OutOfMemoryError\n            \n### 直接内存\n* 作用：\n    * 用于避免Java堆与native对来回复制数据，提高某些场景的性能\n* 特点：\n    * 非虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域\n    * 基于通道（Channel）与缓冲区（Buffer）的I/O方式，可以使用Native函数库直接分配堆外内存，然后通过一个存储在java堆中的DirectByteBuffer对象作为这块内存的引用来操作\n    * 动态拓展时申请不到足够内存会抛出OutOfMemoryError\n    \n## Java Memory Model（java内存模型）\n* 作用：\n    * 控制线程之间的通信，决定一个线程对共享变量的写入何时对另一个线程可见\n    * 定义程序中各个变量的访问规则\n* 特点：\n    * 共享内存的并发模型，线程之间通过读写共享变量（堆内存中的实例域、静态域、数组元素）来完成隐式通信\n    * 所有变量都存储在主内存中，每条线程有自己的私有内存，也叫工作内存，线程对变量的操作必须在工作内存中进行，不能直接操作主内存中的变量，工作内存中存储了变量副本\n    * 属于语言级的内存模型，在不同的编译器、处理器上，通过禁止特定类型的编译器重排序和处理器重排序（指令级并行重排序、内存系统重排序），确保为程序员提供一致的内存可见性\n\n## 重排序\n* 作用：\n    * 编译器和处理器为了提高性能，会对指令重排序\n* 分类：\n    * 编译器优化的重排序：\n        * 编译器在不改变程序语义的情况下，可以重排语句执行顺序\n    * 指令级并行的重排序：\n        * 现代处理器提供了指令级并行技术来将多条指令并行执行，如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序\n    * 内存系统的重排序：\n        * 由于处理器使用了缓存和读写缓冲区，使加载和存储操作看上去是在乱序执行\n* 从Java源代码到执行指令序列：\n    * 源代码 > 编译器优化重排序 > 指令级重排序 > 内存系统重排序 > 最终执行的指令序列        \n* Java进制处理器重排序方式：\n    * 生成指令序列的内存屏障，即重排序时不能把内存屏障指令重排到之前来实现的\n \n## happens-before\n* 作用：\n    * 描述操作之间的内存可见性（可见性：指当一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的）\n* 特点：\n    * JDK5出现\n    * 如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在 happens-before 关系。这里提到的两个操作既可以是在一个线程之内，也可以是在不同线程之间\n* 重要的 happens-before 规则如下：\n    * 程序顺序规则：一个线程中的每个操作，happens- before 于该线程中的任意后续操作。\n    * 监视器锁规则：对一个监视器锁的解锁，happens- before 于随后对这个监视器锁的加锁。\n    * volatile 变量规则：对一个 volatile 域的写，happens- before 于任意后续对这个 volatile 域的读。\n    * 传递性：如果 A happens- before B，且 B happens- before C，那么 A happens- before C。\n   \n## volatile\n* 作用：\n    * 保持变量的修改在多个线程间是同步的\n* 特点：\n    * 保证变量对所有线程都是可见的\n    * volatile变量在并发情况下由于Java的非原子化操作导致线程不安全，synchronized由于统一时间内只能由一个线程操作，所以是线程安全的\n    * 禁止指令重排序优化\n    \n\n    \n\n","slug":"Java/Java内存","published":1,"updated":"2021-10-03T12:41:34.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl2zq0003wx6qbi3xbdwc","content":"<h2 id=\"内存区域、内存模型\"><a href=\"#内存区域、内存模型\" class=\"headerlink\" title=\"内存区域、内存模型\"></a>内存区域、内存模型</h2><ul>\n<li>内存区域：即运行时数据区域，指JVM对于不同类型数据在内存中的存储方式</li>\n<li>内存模型（JMM：Java Memory Model）：定义了线程与主内存之间的抽象关系，即JVM在内存中的工作方式，即JVM使用内存区域中的数据的方式</li>\n</ul>\n<h2 id=\"JDK8之后的内存区域：\"><a href=\"#JDK8之后的内存区域：\" class=\"headerlink\" title=\"JDK8之后的内存区域：\"></a>JDK8之后的内存区域：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Native Method Stacks（本地方法栈）</span><br><span class=\"line\">* Program Counter Register（程序计数器）</span><br><span class=\"line\">* Java Virtual Machine Stacks（JVM Stacks，即虚拟机栈）</span><br><span class=\"line\">    * Stack Frame（栈帧）</span><br><span class=\"line\">        * 局部变量表</span><br><span class=\"line\">        * 操作栈</span><br><span class=\"line\">        * 动态连接</span><br><span class=\"line\">        * 方法返回地址</span><br><span class=\"line\">    * Stack Frame（栈帧）</span><br><span class=\"line\">        * 局部变量表</span><br><span class=\"line\">        * 操作栈</span><br><span class=\"line\">        * 动态连接</span><br><span class=\"line\">        * 方法返回地址</span><br><span class=\"line\">* Heap（堆区）</span><br><span class=\"line\">    * Young区（新生代）</span><br><span class=\"line\">        * Eden</span><br><span class=\"line\">        * S0</span><br><span class=\"line\">        * S1</span><br><span class=\"line\">    * Old区（老年代）</span><br><span class=\"line\">* Method Area（方法区）</span><br><span class=\"line\">    * Runtime Constant Pool（运行时常量池）</span><br><span class=\"line\">    * 方法元信息</span><br><span class=\"line\">    * klass类元信息</span><br><span class=\"line\">* CodeCache（JIT编译产物） </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Program-Counter-Register-程序计数器\"><a href=\"#Program-Counter-Register-程序计数器\" class=\"headerlink\" title=\"Program Counter Register (程序计数器)\"></a>Program Counter Register (程序计数器)</h3><ul>\n<li>作用：当前线程所执行的字节码的行号指示器，当多线程切换时，使线程恢复后找到正确的执行位置</li>\n<li>特点：<ul>\n<li>内存占用少</li>\n<li>线程私有</li>\n<li>当前线程执行Java方法，计数器保存虚拟机中字节码指令地址；执行Native方法，记录null</li>\n<li>唯一一个在JVM规范中没有规定OutOfMemoryError的区域</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"JVM-Stacks\"><a href=\"#JVM-Stacks\" class=\"headerlink\" title=\"JVM Stacks\"></a>JVM Stacks</h3><ul>\n<li>概念：<ul>\n<li>活动线程：当前正在执行的线程</li>\n<li>当前帧：正在执行的方法对应的栈帧，由于只有栈顶帧有效，所以当前帧也是栈顶帧</li>\n<li>当前方法：正在执行的方法</li>\n</ul>\n</li>\n<li>简介：描述了Java方法执行的内存模型，每个方法在执行时都会创建一个栈帧（Stack Frame：栈中的一个元素，方法运行时的基础数据结构），存储局部变量表，操作数栈、动态连接、方法出口等。每一个方法从调用到执行完的过程，对应一个栈帧入栈出栈过程</li>\n<li>作用：保存Java方法执行的时候需要的各种数据、参数</li>\n<li>特点：<ul>\n<li>线程私有</li>\n<li>生命周期与线程相同</li>\n<li>执行引擎运行时，所有指令都只能对当前帧操作</li>\n<li>一个方法对应一个栈帧</li>\n</ul>\n</li>\n<li>组成：<ul>\n<li><h4 id=\"Stack-Frame（栈帧）：\"><a href=\"#Stack-Frame（栈帧）：\" class=\"headerlink\" title=\"Stack Frame（栈帧）：\"></a>Stack Frame（栈帧）：</h4><ul>\n<li>介绍：一个栈帧对应一个方法执行需要的数据</li>\n<li>JVM规定的与栈帧相关异常：<ul>\n<li>线程请求的栈深度大于JVM允许的深度，抛出StackOverflowError</li>\n<li>对于当前大多数可以拓展的JVM栈，在拓展时申请不到足够内存，抛出OutOfMemoryError</li>\n</ul>\n</li>\n<li>组成：<ul>\n<li><h4 id=\"局部变量表\"><a href=\"#局部变量表\" class=\"headerlink\" title=\"局部变量表\"></a>局部变量表</h4><ul>\n<li>作用：存放方法参数和局部变量，字节码指令中的STORE指令就是将操作栈中计算完成局部变量写到当前帧的局部变量表中</li>\n<li>特点：<ul>\n<li>必须显示初始化，才能使用</li>\n<li>如果是非静态方法，会在index[0]位置存储方法所属对象的实例引用，占用4字节，后面存储方法参数和局部变量</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h4 id=\"操作栈\"><a href=\"#操作栈\" class=\"headerlink\" title=\"操作栈\"></a>操作栈</h4><ul>\n<li>作用：用于方法执行过程中信息的存取</li>\n<li>简介：JVM的执行引擎是基于栈的执行引擎，其中的栈即操作栈，方法执行时，使用操作栈进行存取信息</li>\n<li>关联：<ul>\n<li>字节码指令集即基于栈类型，栈深度保存在方法元信息的栈属性中</li>\n<li>例：<ul>\n<li>++i：总体思路是按顺序执行，先将局部变量表中的i执行加1操作（load memory&amp;add&amp;store memory），然后放到操作栈中(load memory)，此时从操作栈栈顶取出的i就是加1之后的</li>\n<li>i++：按照按顺序执行的思路，先将i放到操作栈中(load memory)，然后执行加1的操作(add memory)，加1之后的值更新到局部变量表中(store memory)，此时从栈顶读取到的i未加1，所以如果多线程操作i的时候，可能从局部变量表读到的i比预期的小</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>特点：<ul>\n<li>初始状态为空桶式结构栈</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h4 id=\"动态连接\"><a href=\"#动态连接\" class=\"headerlink\" title=\"动态连接\"></a>动态连接</h4><ul>\n<li>介绍：每个栈帧中包含一个在常量池中对当前方法的引用，目的是为了支持方法调用过程的动态连接</li>\n</ul>\n</li>\n<li><h4 id=\"方法返回地址：\"><a href=\"#方法返回地址：\" class=\"headerlink\" title=\"方法返回地址：\"></a>方法返回地址：</h4><ul>\n<li>方法执行退出情况：<ul>\n<li>正常退出，遇到返回字节码指令，比如return、ireturn、areturn</li>\n<li>异常退出</li>\n</ul>\n</li>\n<li>介绍：即方法调用完成返回的位置，方法调用完成后会弹出当前栈帧</li>\n<li>退出后行为：<ul>\n<li>返回值压入上层调用栈帧 </li>\n<li>异常抛给能处理的栈帧</li>\n<li>程序计数器指向方法调用后的下一条指令    </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Native-Method-Stacks-本地方法栈\"><a href=\"#Native-Method-Stacks-本地方法栈\" class=\"headerlink\" title=\"Native Method Stacks(本地方法栈)\"></a>Native Method Stacks(本地方法栈)</h3><ul>\n<li>介绍：与JVM Stacks类似，但保存的是Native方法对应的栈帧</li>\n<li>特点：<ul>\n<li>也会抛出StackOverFlowError和OutOfMemoryError</li>\n<li>线程调用本地方法时，不受JVM约束</li>\n<li>本地方法通过JNI(Java Native Interface)来访问JVM的数据，可以调用寄存器，具有JVM相同的能力、权限</li>\n<li>大量本地方法运行时，会削弱JVM对系统控制力，本地方法出错信息比较黑盒</li>\n<li>本地方法栈会在内存不足时抛出NativeHeapOutOfMemory</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Heap（堆）\"><a href=\"#Heap（堆）\" class=\"headerlink\" title=\"Heap（堆）\"></a>Heap（堆）</h3><ul>\n<li>介绍：存放对象实例，几乎所有的对象实例都在这里分配内存</li>\n<li>特点：<ul>\n<li>对大多数应用来说，Heap是JVM管理内存中最大的一块</li>\n<li>被所有线程共享</li>\n<li>虚拟机启动时创建</li>\n<li>GC管理的主要区域，有时候也成Heap为GC Heap</li>\n<li>内部可能包含多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB）</li>\n<li>可以由物理上不连续的内存空间组成，只要逻辑上连续即可</li>\n<li>当堆中无内存完成实例分配，并且无法拓展时，会抛出OutOfMemoryError</li>\n</ul>\n</li>\n<li>按照GC中的分代回收算法分类：<ul>\n<li>新生代<ul>\n<li>Eden</li>\n<li>S0</li>\n<li>S1</li>\n</ul>\n</li>\n<li>老年代 </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Metaspace（元数据区）\"><a href=\"#Metaspace（元数据区）\" class=\"headerlink\" title=\"Metaspace（元数据区）\"></a>Metaspace（元数据区）</h3><ul>\n<li>组成：<ul>\n<li><h4 id=\"Method-Area（方法区）\"><a href=\"#Method-Area（方法区）\" class=\"headerlink\" title=\"Method Area（方法区）\"></a>Method Area（方法区）</h4><ul>\n<li>特点：<ul>\n<li>线程共享</li>\n<li>存储被JVM加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</li>\n<li>JVM对该区域限制非常松，可选择不实现垃圾回收</li>\n<li>垃圾回收在该区域出现少，主要是回收运行时常量池和类元信息</li>\n<li>当方法区无法满足内存分配需求时，抛出OutOfMemoryError</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h4 id=\"Runtime-Constant-Pool（运行时常量池）\"><a href=\"#Runtime-Constant-Pool（运行时常量池）\" class=\"headerlink\" title=\"Runtime Constant Pool（运行时常量池）\"></a>Runtime Constant Pool（运行时常量池）</h4><ul>\n<li>作用：<ul>\n<li>用于存放编译器生成的各种字面量、符号引用、翻译出来的直接引用</li>\n</ul>\n</li>\n<li>特点：<ul>\n<li>具备动态性，非编译期也可以产生常量，运行期间可以将常量放入池中，例如String的intern() 方法</li>\n<li>当申请不到新内存时，抛出OutOfMemoryError</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h3><ul>\n<li>作用：<ul>\n<li>用于避免Java堆与native对来回复制数据，提高某些场景的性能</li>\n</ul>\n</li>\n<li>特点：<ul>\n<li>非虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域</li>\n<li>基于通道（Channel）与缓冲区（Buffer）的I/O方式，可以使用Native函数库直接分配堆外内存，然后通过一个存储在java堆中的DirectByteBuffer对象作为这块内存的引用来操作</li>\n<li>动态拓展时申请不到足够内存会抛出OutOfMemoryError</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Java-Memory-Model（java内存模型）\"><a href=\"#Java-Memory-Model（java内存模型）\" class=\"headerlink\" title=\"Java Memory Model（java内存模型）\"></a>Java Memory Model（java内存模型）</h2><ul>\n<li>作用：<ul>\n<li>控制线程之间的通信，决定一个线程对共享变量的写入何时对另一个线程可见</li>\n<li>定义程序中各个变量的访问规则</li>\n</ul>\n</li>\n<li>特点：<ul>\n<li>共享内存的并发模型，线程之间通过读写共享变量（堆内存中的实例域、静态域、数组元素）来完成隐式通信</li>\n<li>所有变量都存储在主内存中，每条线程有自己的私有内存，也叫工作内存，线程对变量的操作必须在工作内存中进行，不能直接操作主内存中的变量，工作内存中存储了变量副本</li>\n<li>属于语言级的内存模型，在不同的编译器、处理器上，通过禁止特定类型的编译器重排序和处理器重排序（指令级并行重排序、内存系统重排序），确保为程序员提供一致的内存可见性</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"重排序\"><a href=\"#重排序\" class=\"headerlink\" title=\"重排序\"></a>重排序</h2><ul>\n<li>作用：<ul>\n<li>编译器和处理器为了提高性能，会对指令重排序</li>\n</ul>\n</li>\n<li>分类：<ul>\n<li>编译器优化的重排序：<ul>\n<li>编译器在不改变程序语义的情况下，可以重排语句执行顺序</li>\n</ul>\n</li>\n<li>指令级并行的重排序：<ul>\n<li>现代处理器提供了指令级并行技术来将多条指令并行执行，如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序</li>\n</ul>\n</li>\n<li>内存系统的重排序：<ul>\n<li>由于处理器使用了缓存和读写缓冲区，使加载和存储操作看上去是在乱序执行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>从Java源代码到执行指令序列：<ul>\n<li>源代码 &gt; 编译器优化重排序 &gt; 指令级重排序 &gt; 内存系统重排序 &gt; 最终执行的指令序列        </li>\n</ul>\n</li>\n<li>Java进制处理器重排序方式：<ul>\n<li>生成指令序列的内存屏障，即重排序时不能把内存屏障指令重排到之前来实现的</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"happens-before\"><a href=\"#happens-before\" class=\"headerlink\" title=\"happens-before\"></a>happens-before</h2><ul>\n<li>作用：<ul>\n<li>描述操作之间的内存可见性（可见性：指当一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的）</li>\n</ul>\n</li>\n<li>特点：<ul>\n<li>JDK5出现</li>\n<li>如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在 happens-before 关系。这里提到的两个操作既可以是在一个线程之内，也可以是在不同线程之间</li>\n</ul>\n</li>\n<li>重要的 happens-before 规则如下：<ul>\n<li>程序顺序规则：一个线程中的每个操作，happens- before 于该线程中的任意后续操作。</li>\n<li>监视器锁规则：对一个监视器锁的解锁，happens- before 于随后对这个监视器锁的加锁。</li>\n<li>volatile 变量规则：对一个 volatile 域的写，happens- before 于任意后续对这个 volatile 域的读。</li>\n<li>传递性：如果 A happens- before B，且 B happens- before C，那么 A happens- before C。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h2><ul>\n<li>作用：<ul>\n<li>保持变量的修改在多个线程间是同步的</li>\n</ul>\n</li>\n<li>特点：<ul>\n<li>保证变量对所有线程都是可见的</li>\n<li>volatile变量在并发情况下由于Java的非原子化操作导致线程不安全，synchronized由于统一时间内只能由一个线程操作，所以是线程安全的</li>\n<li>禁止指令重排序优化</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"内存区域、内存模型\"><a href=\"#内存区域、内存模型\" class=\"headerlink\" title=\"内存区域、内存模型\"></a>内存区域、内存模型</h2><ul>\n<li>内存区域：即运行时数据区域，指JVM对于不同类型数据在内存中的存储方式</li>\n<li>内存模型（JMM：Java Memory Model）：定义了线程与主内存之间的抽象关系，即JVM在内存中的工作方式，即JVM使用内存区域中的数据的方式</li>\n</ul>\n<h2 id=\"JDK8之后的内存区域：\"><a href=\"#JDK8之后的内存区域：\" class=\"headerlink\" title=\"JDK8之后的内存区域：\"></a>JDK8之后的内存区域：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Native Method Stacks（本地方法栈）</span><br><span class=\"line\">* Program Counter Register（程序计数器）</span><br><span class=\"line\">* Java Virtual Machine Stacks（JVM Stacks，即虚拟机栈）</span><br><span class=\"line\">    * Stack Frame（栈帧）</span><br><span class=\"line\">        * 局部变量表</span><br><span class=\"line\">        * 操作栈</span><br><span class=\"line\">        * 动态连接</span><br><span class=\"line\">        * 方法返回地址</span><br><span class=\"line\">    * Stack Frame（栈帧）</span><br><span class=\"line\">        * 局部变量表</span><br><span class=\"line\">        * 操作栈</span><br><span class=\"line\">        * 动态连接</span><br><span class=\"line\">        * 方法返回地址</span><br><span class=\"line\">* Heap（堆区）</span><br><span class=\"line\">    * Young区（新生代）</span><br><span class=\"line\">        * Eden</span><br><span class=\"line\">        * S0</span><br><span class=\"line\">        * S1</span><br><span class=\"line\">    * Old区（老年代）</span><br><span class=\"line\">* Method Area（方法区）</span><br><span class=\"line\">    * Runtime Constant Pool（运行时常量池）</span><br><span class=\"line\">    * 方法元信息</span><br><span class=\"line\">    * klass类元信息</span><br><span class=\"line\">* CodeCache（JIT编译产物） </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Program-Counter-Register-程序计数器\"><a href=\"#Program-Counter-Register-程序计数器\" class=\"headerlink\" title=\"Program Counter Register (程序计数器)\"></a>Program Counter Register (程序计数器)</h3><ul>\n<li>作用：当前线程所执行的字节码的行号指示器，当多线程切换时，使线程恢复后找到正确的执行位置</li>\n<li>特点：<ul>\n<li>内存占用少</li>\n<li>线程私有</li>\n<li>当前线程执行Java方法，计数器保存虚拟机中字节码指令地址；执行Native方法，记录null</li>\n<li>唯一一个在JVM规范中没有规定OutOfMemoryError的区域</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"JVM-Stacks\"><a href=\"#JVM-Stacks\" class=\"headerlink\" title=\"JVM Stacks\"></a>JVM Stacks</h3><ul>\n<li>概念：<ul>\n<li>活动线程：当前正在执行的线程</li>\n<li>当前帧：正在执行的方法对应的栈帧，由于只有栈顶帧有效，所以当前帧也是栈顶帧</li>\n<li>当前方法：正在执行的方法</li>\n</ul>\n</li>\n<li>简介：描述了Java方法执行的内存模型，每个方法在执行时都会创建一个栈帧（Stack Frame：栈中的一个元素，方法运行时的基础数据结构），存储局部变量表，操作数栈、动态连接、方法出口等。每一个方法从调用到执行完的过程，对应一个栈帧入栈出栈过程</li>\n<li>作用：保存Java方法执行的时候需要的各种数据、参数</li>\n<li>特点：<ul>\n<li>线程私有</li>\n<li>生命周期与线程相同</li>\n<li>执行引擎运行时，所有指令都只能对当前帧操作</li>\n<li>一个方法对应一个栈帧</li>\n</ul>\n</li>\n<li>组成：<ul>\n<li><h4 id=\"Stack-Frame（栈帧）：\"><a href=\"#Stack-Frame（栈帧）：\" class=\"headerlink\" title=\"Stack Frame（栈帧）：\"></a>Stack Frame（栈帧）：</h4><ul>\n<li>介绍：一个栈帧对应一个方法执行需要的数据</li>\n<li>JVM规定的与栈帧相关异常：<ul>\n<li>线程请求的栈深度大于JVM允许的深度，抛出StackOverflowError</li>\n<li>对于当前大多数可以拓展的JVM栈，在拓展时申请不到足够内存，抛出OutOfMemoryError</li>\n</ul>\n</li>\n<li>组成：<ul>\n<li><h4 id=\"局部变量表\"><a href=\"#局部变量表\" class=\"headerlink\" title=\"局部变量表\"></a>局部变量表</h4><ul>\n<li>作用：存放方法参数和局部变量，字节码指令中的STORE指令就是将操作栈中计算完成局部变量写到当前帧的局部变量表中</li>\n<li>特点：<ul>\n<li>必须显示初始化，才能使用</li>\n<li>如果是非静态方法，会在index[0]位置存储方法所属对象的实例引用，占用4字节，后面存储方法参数和局部变量</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h4 id=\"操作栈\"><a href=\"#操作栈\" class=\"headerlink\" title=\"操作栈\"></a>操作栈</h4><ul>\n<li>作用：用于方法执行过程中信息的存取</li>\n<li>简介：JVM的执行引擎是基于栈的执行引擎，其中的栈即操作栈，方法执行时，使用操作栈进行存取信息</li>\n<li>关联：<ul>\n<li>字节码指令集即基于栈类型，栈深度保存在方法元信息的栈属性中</li>\n<li>例：<ul>\n<li>++i：总体思路是按顺序执行，先将局部变量表中的i执行加1操作（load memory&amp;add&amp;store memory），然后放到操作栈中(load memory)，此时从操作栈栈顶取出的i就是加1之后的</li>\n<li>i++：按照按顺序执行的思路，先将i放到操作栈中(load memory)，然后执行加1的操作(add memory)，加1之后的值更新到局部变量表中(store memory)，此时从栈顶读取到的i未加1，所以如果多线程操作i的时候，可能从局部变量表读到的i比预期的小</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>特点：<ul>\n<li>初始状态为空桶式结构栈</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h4 id=\"动态连接\"><a href=\"#动态连接\" class=\"headerlink\" title=\"动态连接\"></a>动态连接</h4><ul>\n<li>介绍：每个栈帧中包含一个在常量池中对当前方法的引用，目的是为了支持方法调用过程的动态连接</li>\n</ul>\n</li>\n<li><h4 id=\"方法返回地址：\"><a href=\"#方法返回地址：\" class=\"headerlink\" title=\"方法返回地址：\"></a>方法返回地址：</h4><ul>\n<li>方法执行退出情况：<ul>\n<li>正常退出，遇到返回字节码指令，比如return、ireturn、areturn</li>\n<li>异常退出</li>\n</ul>\n</li>\n<li>介绍：即方法调用完成返回的位置，方法调用完成后会弹出当前栈帧</li>\n<li>退出后行为：<ul>\n<li>返回值压入上层调用栈帧 </li>\n<li>异常抛给能处理的栈帧</li>\n<li>程序计数器指向方法调用后的下一条指令    </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Native-Method-Stacks-本地方法栈\"><a href=\"#Native-Method-Stacks-本地方法栈\" class=\"headerlink\" title=\"Native Method Stacks(本地方法栈)\"></a>Native Method Stacks(本地方法栈)</h3><ul>\n<li>介绍：与JVM Stacks类似，但保存的是Native方法对应的栈帧</li>\n<li>特点：<ul>\n<li>也会抛出StackOverFlowError和OutOfMemoryError</li>\n<li>线程调用本地方法时，不受JVM约束</li>\n<li>本地方法通过JNI(Java Native Interface)来访问JVM的数据，可以调用寄存器，具有JVM相同的能力、权限</li>\n<li>大量本地方法运行时，会削弱JVM对系统控制力，本地方法出错信息比较黑盒</li>\n<li>本地方法栈会在内存不足时抛出NativeHeapOutOfMemory</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Heap（堆）\"><a href=\"#Heap（堆）\" class=\"headerlink\" title=\"Heap（堆）\"></a>Heap（堆）</h3><ul>\n<li>介绍：存放对象实例，几乎所有的对象实例都在这里分配内存</li>\n<li>特点：<ul>\n<li>对大多数应用来说，Heap是JVM管理内存中最大的一块</li>\n<li>被所有线程共享</li>\n<li>虚拟机启动时创建</li>\n<li>GC管理的主要区域，有时候也成Heap为GC Heap</li>\n<li>内部可能包含多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB）</li>\n<li>可以由物理上不连续的内存空间组成，只要逻辑上连续即可</li>\n<li>当堆中无内存完成实例分配，并且无法拓展时，会抛出OutOfMemoryError</li>\n</ul>\n</li>\n<li>按照GC中的分代回收算法分类：<ul>\n<li>新生代<ul>\n<li>Eden</li>\n<li>S0</li>\n<li>S1</li>\n</ul>\n</li>\n<li>老年代 </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Metaspace（元数据区）\"><a href=\"#Metaspace（元数据区）\" class=\"headerlink\" title=\"Metaspace（元数据区）\"></a>Metaspace（元数据区）</h3><ul>\n<li>组成：<ul>\n<li><h4 id=\"Method-Area（方法区）\"><a href=\"#Method-Area（方法区）\" class=\"headerlink\" title=\"Method Area（方法区）\"></a>Method Area（方法区）</h4><ul>\n<li>特点：<ul>\n<li>线程共享</li>\n<li>存储被JVM加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</li>\n<li>JVM对该区域限制非常松，可选择不实现垃圾回收</li>\n<li>垃圾回收在该区域出现少，主要是回收运行时常量池和类元信息</li>\n<li>当方法区无法满足内存分配需求时，抛出OutOfMemoryError</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h4 id=\"Runtime-Constant-Pool（运行时常量池）\"><a href=\"#Runtime-Constant-Pool（运行时常量池）\" class=\"headerlink\" title=\"Runtime Constant Pool（运行时常量池）\"></a>Runtime Constant Pool（运行时常量池）</h4><ul>\n<li>作用：<ul>\n<li>用于存放编译器生成的各种字面量、符号引用、翻译出来的直接引用</li>\n</ul>\n</li>\n<li>特点：<ul>\n<li>具备动态性，非编译期也可以产生常量，运行期间可以将常量放入池中，例如String的intern() 方法</li>\n<li>当申请不到新内存时，抛出OutOfMemoryError</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h3><ul>\n<li>作用：<ul>\n<li>用于避免Java堆与native对来回复制数据，提高某些场景的性能</li>\n</ul>\n</li>\n<li>特点：<ul>\n<li>非虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域</li>\n<li>基于通道（Channel）与缓冲区（Buffer）的I/O方式，可以使用Native函数库直接分配堆外内存，然后通过一个存储在java堆中的DirectByteBuffer对象作为这块内存的引用来操作</li>\n<li>动态拓展时申请不到足够内存会抛出OutOfMemoryError</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Java-Memory-Model（java内存模型）\"><a href=\"#Java-Memory-Model（java内存模型）\" class=\"headerlink\" title=\"Java Memory Model（java内存模型）\"></a>Java Memory Model（java内存模型）</h2><ul>\n<li>作用：<ul>\n<li>控制线程之间的通信，决定一个线程对共享变量的写入何时对另一个线程可见</li>\n<li>定义程序中各个变量的访问规则</li>\n</ul>\n</li>\n<li>特点：<ul>\n<li>共享内存的并发模型，线程之间通过读写共享变量（堆内存中的实例域、静态域、数组元素）来完成隐式通信</li>\n<li>所有变量都存储在主内存中，每条线程有自己的私有内存，也叫工作内存，线程对变量的操作必须在工作内存中进行，不能直接操作主内存中的变量，工作内存中存储了变量副本</li>\n<li>属于语言级的内存模型，在不同的编译器、处理器上，通过禁止特定类型的编译器重排序和处理器重排序（指令级并行重排序、内存系统重排序），确保为程序员提供一致的内存可见性</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"重排序\"><a href=\"#重排序\" class=\"headerlink\" title=\"重排序\"></a>重排序</h2><ul>\n<li>作用：<ul>\n<li>编译器和处理器为了提高性能，会对指令重排序</li>\n</ul>\n</li>\n<li>分类：<ul>\n<li>编译器优化的重排序：<ul>\n<li>编译器在不改变程序语义的情况下，可以重排语句执行顺序</li>\n</ul>\n</li>\n<li>指令级并行的重排序：<ul>\n<li>现代处理器提供了指令级并行技术来将多条指令并行执行，如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序</li>\n</ul>\n</li>\n<li>内存系统的重排序：<ul>\n<li>由于处理器使用了缓存和读写缓冲区，使加载和存储操作看上去是在乱序执行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>从Java源代码到执行指令序列：<ul>\n<li>源代码 &gt; 编译器优化重排序 &gt; 指令级重排序 &gt; 内存系统重排序 &gt; 最终执行的指令序列        </li>\n</ul>\n</li>\n<li>Java进制处理器重排序方式：<ul>\n<li>生成指令序列的内存屏障，即重排序时不能把内存屏障指令重排到之前来实现的</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"happens-before\"><a href=\"#happens-before\" class=\"headerlink\" title=\"happens-before\"></a>happens-before</h2><ul>\n<li>作用：<ul>\n<li>描述操作之间的内存可见性（可见性：指当一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的）</li>\n</ul>\n</li>\n<li>特点：<ul>\n<li>JDK5出现</li>\n<li>如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在 happens-before 关系。这里提到的两个操作既可以是在一个线程之内，也可以是在不同线程之间</li>\n</ul>\n</li>\n<li>重要的 happens-before 规则如下：<ul>\n<li>程序顺序规则：一个线程中的每个操作，happens- before 于该线程中的任意后续操作。</li>\n<li>监视器锁规则：对一个监视器锁的解锁，happens- before 于随后对这个监视器锁的加锁。</li>\n<li>volatile 变量规则：对一个 volatile 域的写，happens- before 于任意后续对这个 volatile 域的读。</li>\n<li>传递性：如果 A happens- before B，且 B happens- before C，那么 A happens- before C。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h2><ul>\n<li>作用：<ul>\n<li>保持变量的修改在多个线程间是同步的</li>\n</ul>\n</li>\n<li>特点：<ul>\n<li>保证变量对所有线程都是可见的</li>\n<li>volatile变量在并发情况下由于Java的非原子化操作导致线程不安全，synchronized由于统一时间内只能由一个线程操作，所以是线程安全的</li>\n<li>禁止指令重排序优化</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Java概述","date":"2021-08-21T07:24:01.000Z","_content":"\n### 计算机语言\n* 人与计算机之间交流沟通的工具\n\n### Java简介\n* Java编程语言是个简单、面向对象、分布式、解释性、健壮、安全、与系统无关、可移植、高性能、多线程和动态的语言\n\n### Java发展史\n* 发明人：詹姆斯高斯林\n* 发明公司：Sun\n* 发展节点：\n  * 5.0进入发展快车道\n  * 8.0目前商业化应用最多\n  * 当前建议学习11.0\n","source":"_posts/Java/Java概述.md","raw":"---\ntitle: Java概述\ndate: 2021-08-21 15:24:01\ntags: 编程\ncategories:\n- [Java]\n---\n\n### 计算机语言\n* 人与计算机之间交流沟通的工具\n\n### Java简介\n* Java编程语言是个简单、面向对象、分布式、解释性、健壮、安全、与系统无关、可移植、高性能、多线程和动态的语言\n\n### Java发展史\n* 发明人：詹姆斯高斯林\n* 发明公司：Sun\n* 发展节点：\n  * 5.0进入发展快车道\n  * 8.0目前商业化应用最多\n  * 当前建议学习11.0\n","slug":"Java/Java概述","published":1,"updated":"2021-10-03T12:41:34.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl2zs0005wx6q1wb48p1n","content":"<h3 id=\"计算机语言\"><a href=\"#计算机语言\" class=\"headerlink\" title=\"计算机语言\"></a>计算机语言</h3><ul>\n<li>人与计算机之间交流沟通的工具</li>\n</ul>\n<h3 id=\"Java简介\"><a href=\"#Java简介\" class=\"headerlink\" title=\"Java简介\"></a>Java简介</h3><ul>\n<li>Java编程语言是个简单、面向对象、分布式、解释性、健壮、安全、与系统无关、可移植、高性能、多线程和动态的语言</li>\n</ul>\n<h3 id=\"Java发展史\"><a href=\"#Java发展史\" class=\"headerlink\" title=\"Java发展史\"></a>Java发展史</h3><ul>\n<li>发明人：詹姆斯高斯林</li>\n<li>发明公司：Sun</li>\n<li>发展节点：<ul>\n<li>5.0进入发展快车道</li>\n<li>8.0目前商业化应用最多</li>\n<li>当前建议学习11.0</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"计算机语言\"><a href=\"#计算机语言\" class=\"headerlink\" title=\"计算机语言\"></a>计算机语言</h3><ul>\n<li>人与计算机之间交流沟通的工具</li>\n</ul>\n<h3 id=\"Java简介\"><a href=\"#Java简介\" class=\"headerlink\" title=\"Java简介\"></a>Java简介</h3><ul>\n<li>Java编程语言是个简单、面向对象、分布式、解释性、健壮、安全、与系统无关、可移植、高性能、多线程和动态的语言</li>\n</ul>\n<h3 id=\"Java发展史\"><a href=\"#Java发展史\" class=\"headerlink\" title=\"Java发展史\"></a>Java发展史</h3><ul>\n<li>发明人：詹姆斯高斯林</li>\n<li>发明公司：Sun</li>\n<li>发展节点：<ul>\n<li>5.0进入发展快车道</li>\n<li>8.0目前商业化应用最多</li>\n<li>当前建议学习11.0</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Java注释","date":"2021-08-25T12:45:38.000Z","_content":"### 三种注释格式\n* 单行注释\n```\n// 单行注释\n```\n\n* 多行注释\n```\n/*\n多行注释\n多行注释\n多行注释\n*/\n```\n\n* javadoc注释\n```\n/**\nJavadoc注释\nJavadoc注释\nJavadoc注释\n* @author 作者名称\n*/\n```\n\n### javadoc标签\n* [标签描述参考文章](https://www.runoob.com/java/java-documentation.html)\n\n### 自定义注释\n* IDE工具中一般都有自定义注释的功能，可以自行进行编辑，然后配合快捷键进行使用\n\n### 需要注意的点\n* 注释仅存在文档中，不参与编译运行\n","source":"_posts/Java/Java注释.md","raw":"---\ntitle: Java注释\ndate: 2021-08-25 20:45:38\ntags: 编程\ncategories:\n- [Java]\n---\n### 三种注释格式\n* 单行注释\n```\n// 单行注释\n```\n\n* 多行注释\n```\n/*\n多行注释\n多行注释\n多行注释\n*/\n```\n\n* javadoc注释\n```\n/**\nJavadoc注释\nJavadoc注释\nJavadoc注释\n* @author 作者名称\n*/\n```\n\n### javadoc标签\n* [标签描述参考文章](https://www.runoob.com/java/java-documentation.html)\n\n### 自定义注释\n* IDE工具中一般都有自定义注释的功能，可以自行进行编辑，然后配合快捷键进行使用\n\n### 需要注意的点\n* 注释仅存在文档中，不参与编译运行\n","slug":"Java/Java注释","published":1,"updated":"2021-10-03T12:41:34.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl2zt0006wx6q3wg754pj","content":"<h3 id=\"三种注释格式\"><a href=\"#三种注释格式\" class=\"headerlink\" title=\"三种注释格式\"></a>三种注释格式</h3><ul>\n<li><p>单行注释</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 单行注释</span><br></pre></td></tr></table></figure></li>\n<li><p>多行注释</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">多行注释</span><br><span class=\"line\">多行注释</span><br><span class=\"line\">多行注释</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure></li>\n<li><p>javadoc注释</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">Javadoc注释</span><br><span class=\"line\">Javadoc注释</span><br><span class=\"line\">Javadoc注释</span><br><span class=\"line\">* @author 作者名称</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"javadoc标签\"><a href=\"#javadoc标签\" class=\"headerlink\" title=\"javadoc标签\"></a>javadoc标签</h3><ul>\n<li><a href=\"https://www.runoob.com/java/java-documentation.html\">标签描述参考文章</a></li>\n</ul>\n<h3 id=\"自定义注释\"><a href=\"#自定义注释\" class=\"headerlink\" title=\"自定义注释\"></a>自定义注释</h3><ul>\n<li>IDE工具中一般都有自定义注释的功能，可以自行进行编辑，然后配合快捷键进行使用</li>\n</ul>\n<h3 id=\"需要注意的点\"><a href=\"#需要注意的点\" class=\"headerlink\" title=\"需要注意的点\"></a>需要注意的点</h3><ul>\n<li>注释仅存在文档中，不参与编译运行</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"三种注释格式\"><a href=\"#三种注释格式\" class=\"headerlink\" title=\"三种注释格式\"></a>三种注释格式</h3><ul>\n<li><p>单行注释</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 单行注释</span><br></pre></td></tr></table></figure></li>\n<li><p>多行注释</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">多行注释</span><br><span class=\"line\">多行注释</span><br><span class=\"line\">多行注释</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure></li>\n<li><p>javadoc注释</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">Javadoc注释</span><br><span class=\"line\">Javadoc注释</span><br><span class=\"line\">Javadoc注释</span><br><span class=\"line\">* @author 作者名称</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"javadoc标签\"><a href=\"#javadoc标签\" class=\"headerlink\" title=\"javadoc标签\"></a>javadoc标签</h3><ul>\n<li><a href=\"https://www.runoob.com/java/java-documentation.html\">标签描述参考文章</a></li>\n</ul>\n<h3 id=\"自定义注释\"><a href=\"#自定义注释\" class=\"headerlink\" title=\"自定义注释\"></a>自定义注释</h3><ul>\n<li>IDE工具中一般都有自定义注释的功能，可以自行进行编辑，然后配合快捷键进行使用</li>\n</ul>\n<h3 id=\"需要注意的点\"><a href=\"#需要注意的点\" class=\"headerlink\" title=\"需要注意的点\"></a>需要注意的点</h3><ul>\n<li>注释仅存在文档中，不参与编译运行</li>\n</ul>\n"},{"title":"Java程序运行流程","date":"2021-08-25T07:29:57.000Z","_content":"\n### Java运行流程\n* **Java源代码** --- 编译工具 ---> **Java字节码文件** --- 运行工具 ---> **Java程序运行**\n\n### Java程序的基本单位\n* 类\n\n### Java程序执行入口\n* main方法\n","source":"_posts/Java/Java程序运行流程.md","raw":"---\ntitle: Java程序运行流程\ndate: 2021-08-25 15:29:57\ntags: 编程\ncategories:\n- [Java]\n---\n\n### Java运行流程\n* **Java源代码** --- 编译工具 ---> **Java字节码文件** --- 运行工具 ---> **Java程序运行**\n\n### Java程序的基本单位\n* 类\n\n### Java程序执行入口\n* main方法\n","slug":"Java/Java程序运行流程","published":1,"updated":"2021-10-03T12:41:34.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl2zx000awx6q38ow2mpf","content":"<h3 id=\"Java运行流程\"><a href=\"#Java运行流程\" class=\"headerlink\" title=\"Java运行流程\"></a>Java运行流程</h3><ul>\n<li><strong>Java源代码</strong> — 编译工具 —&gt; <strong>Java字节码文件</strong> — 运行工具 —&gt; <strong>Java程序运行</strong></li>\n</ul>\n<h3 id=\"Java程序的基本单位\"><a href=\"#Java程序的基本单位\" class=\"headerlink\" title=\"Java程序的基本单位\"></a>Java程序的基本单位</h3><ul>\n<li>类</li>\n</ul>\n<h3 id=\"Java程序执行入口\"><a href=\"#Java程序执行入口\" class=\"headerlink\" title=\"Java程序执行入口\"></a>Java程序执行入口</h3><ul>\n<li>main方法</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Java运行流程\"><a href=\"#Java运行流程\" class=\"headerlink\" title=\"Java运行流程\"></a>Java运行流程</h3><ul>\n<li><strong>Java源代码</strong> — 编译工具 —&gt; <strong>Java字节码文件</strong> — 运行工具 —&gt; <strong>Java程序运行</strong></li>\n</ul>\n<h3 id=\"Java程序的基本单位\"><a href=\"#Java程序的基本单位\" class=\"headerlink\" title=\"Java程序的基本单位\"></a>Java程序的基本单位</h3><ul>\n<li>类</li>\n</ul>\n<h3 id=\"Java程序执行入口\"><a href=\"#Java程序执行入口\" class=\"headerlink\" title=\"Java程序执行入口\"></a>Java程序执行入口</h3><ul>\n<li>main方法</li>\n</ul>\n"},{"title":"Java类","date":"2021-09-25T09:13:23.000Z","_content":"\n## \n","source":"_posts/Java/Java类.md","raw":"---\ntitle: Java类\ndate: 2021-09-25 17:13:23\ntags: 编程\ncategories:\n- [Java]\n---\n\n## \n","slug":"Java/Java类","published":1,"updated":"2021-10-03T12:41:34.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl2zy000cwx6q87gjfidz","content":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>"},{"title":"Java跨平台原理","date":"2021-08-21T09:39:04.000Z","_content":"\n* 平台：指可以运行代码的操作系统\n* JVM：Java virtual machine，Java实现跨平台的软件\n","source":"_posts/Java/Java跨平台原理.md","raw":"---\ntitle: Java跨平台原理\ndate: 2021-08-21 17:39:04\ntags: 编程\ncategories:\n- [Java]\n---\n\n* 平台：指可以运行代码的操作系统\n* JVM：Java virtual machine，Java实现跨平台的软件\n","slug":"Java/Java跨平台原理","published":1,"updated":"2021-10-03T12:41:34.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl302000gwx6qeg8358vu","content":"<ul>\n<li>平台：指可以运行代码的操作系统</li>\n<li>JVM：Java virtual machine，Java实现跨平台的软件</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>平台：指可以运行代码的操作系统</li>\n<li>JVM：Java virtual machine，Java实现跨平台的软件</li>\n</ul>\n"},{"title":"关键字、标识符","date":"2021-08-26T12:59:33.000Z","_content":"### 关键字\n* 特点：\n  * 小写\n\n### 标识符\n* 作用：用于给常量、变量、函数、语句块等进行命名\n* 组成:\n  * 字母\n  * 数字\n  * 下划线（_）\n  * 美元符号（$）\n* 特点：\n  * 第一个字符不能是数字\n  * 不能使用关键字和保留字\n  * 无长度限制\n  * 区分大小写\n","source":"_posts/Java/关键字、标识符.md","raw":"---\ntitle: 关键字、标识符\ndate: 2021-08-26 20:59:33\ntags: 编程\ncategories:\n- [Java]\n---\n### 关键字\n* 特点：\n  * 小写\n\n### 标识符\n* 作用：用于给常量、变量、函数、语句块等进行命名\n* 组成:\n  * 字母\n  * 数字\n  * 下划线（_）\n  * 美元符号（$）\n* 特点：\n  * 第一个字符不能是数字\n  * 不能使用关键字和保留字\n  * 无长度限制\n  * 区分大小写\n","slug":"Java/关键字、标识符","published":1,"updated":"2021-10-03T12:41:34.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl304000jwx6q8k1cb6bj","content":"<h3 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><ul>\n<li>特点：<ul>\n<li>小写</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h3><ul>\n<li>作用：用于给常量、变量、函数、语句块等进行命名</li>\n<li>组成:<ul>\n<li>字母</li>\n<li>数字</li>\n<li>下划线（_）</li>\n<li>美元符号（$）</li>\n</ul>\n</li>\n<li>特点：<ul>\n<li>第一个字符不能是数字</li>\n<li>不能使用关键字和保留字</li>\n<li>无长度限制</li>\n<li>区分大小写</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><ul>\n<li>特点：<ul>\n<li>小写</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h3><ul>\n<li>作用：用于给常量、变量、函数、语句块等进行命名</li>\n<li>组成:<ul>\n<li>字母</li>\n<li>数字</li>\n<li>下划线（_）</li>\n<li>美元符号（$）</li>\n</ul>\n</li>\n<li>特点：<ul>\n<li>第一个字符不能是数字</li>\n<li>不能使用关键字和保留字</li>\n<li>无长度限制</li>\n<li>区分大小写</li>\n</ul>\n</li>\n</ul>\n"},{"title":"数据类型","date":"2021-08-26T12:39:22.000Z","_content":"### 存储单位\n* 8 bit = 1 Byte 一字节\n* 1024 B = 1 KB （KiloByte） 千字节\n* 1024 KB = 1 MB （MegaByte） 兆字节\n* 1024 MB = 1 GB （GigaByte） 吉字节\n* 1024 GB = 1 TB （TeraByte） 太字节\n* 1024 TB = 1 PB （PetaByte） 拍字节\n* 1024 PB = 1 EB （ExaByte） 艾字节\n* 1024 EB = 1 ZB （ZetaByte） 泽字节\n* 1024 ZB = 1 YB （YottaByte） 尧字节\n* 1024 YB = 1BB（Brontobyte）珀字节\n* 1024 BB = 1 NB （NonaByte） 诺字节\n* 1024 NB = 1 DB （DoggaByte）刀字节\n\n### 字节（Byte）\n* 计算机最小存储单元\n* 可存储开和关信息，即1和0\n\n### 数据类型\n* 基本数据类型\n  * 整形\n    * byte\n    * short\n    * int\n    * long\n  * 浮点型\n    * float\n    * double\n  * 字符\n    * char\n  * 布尔型\n    * boolean\n* 引用数据类型\n  * string\n  * class\n  * interface\n  * list\n  * map\n\n### 类型转换\n* 数据范围大小：\n  * double>float>long>int>short=char>byte\n* 自动转换（小转大）\n  * 示例：\n    * double a = 10;\n  * 注意：\n    * byte不能自动转换成char\n* 强制转换（大转小）\n  * 示例：\n    * int a = (int)1.1;\n","source":"_posts/Java/数据类型.md","raw":"---\ntitle: 数据类型\ndate: 2021-08-26 20:39:22\ntags: 编程\ncategories:\n- [Java]\n---\n### 存储单位\n* 8 bit = 1 Byte 一字节\n* 1024 B = 1 KB （KiloByte） 千字节\n* 1024 KB = 1 MB （MegaByte） 兆字节\n* 1024 MB = 1 GB （GigaByte） 吉字节\n* 1024 GB = 1 TB （TeraByte） 太字节\n* 1024 TB = 1 PB （PetaByte） 拍字节\n* 1024 PB = 1 EB （ExaByte） 艾字节\n* 1024 EB = 1 ZB （ZetaByte） 泽字节\n* 1024 ZB = 1 YB （YottaByte） 尧字节\n* 1024 YB = 1BB（Brontobyte）珀字节\n* 1024 BB = 1 NB （NonaByte） 诺字节\n* 1024 NB = 1 DB （DoggaByte）刀字节\n\n### 字节（Byte）\n* 计算机最小存储单元\n* 可存储开和关信息，即1和0\n\n### 数据类型\n* 基本数据类型\n  * 整形\n    * byte\n    * short\n    * int\n    * long\n  * 浮点型\n    * float\n    * double\n  * 字符\n    * char\n  * 布尔型\n    * boolean\n* 引用数据类型\n  * string\n  * class\n  * interface\n  * list\n  * map\n\n### 类型转换\n* 数据范围大小：\n  * double>float>long>int>short=char>byte\n* 自动转换（小转大）\n  * 示例：\n    * double a = 10;\n  * 注意：\n    * byte不能自动转换成char\n* 强制转换（大转小）\n  * 示例：\n    * int a = (int)1.1;\n","slug":"Java/数据类型","published":1,"updated":"2021-10-03T12:41:34.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl305000mwx6qai2ifzls","content":"<h3 id=\"存储单位\"><a href=\"#存储单位\" class=\"headerlink\" title=\"存储单位\"></a>存储单位</h3><ul>\n<li>8 bit = 1 Byte 一字节</li>\n<li>1024 B = 1 KB （KiloByte） 千字节</li>\n<li>1024 KB = 1 MB （MegaByte） 兆字节</li>\n<li>1024 MB = 1 GB （GigaByte） 吉字节</li>\n<li>1024 GB = 1 TB （TeraByte） 太字节</li>\n<li>1024 TB = 1 PB （PetaByte） 拍字节</li>\n<li>1024 PB = 1 EB （ExaByte） 艾字节</li>\n<li>1024 EB = 1 ZB （ZetaByte） 泽字节</li>\n<li>1024 ZB = 1 YB （YottaByte） 尧字节</li>\n<li>1024 YB = 1BB（Brontobyte）珀字节</li>\n<li>1024 BB = 1 NB （NonaByte） 诺字节</li>\n<li>1024 NB = 1 DB （DoggaByte）刀字节</li>\n</ul>\n<h3 id=\"字节（Byte）\"><a href=\"#字节（Byte）\" class=\"headerlink\" title=\"字节（Byte）\"></a>字节（Byte）</h3><ul>\n<li>计算机最小存储单元</li>\n<li>可存储开和关信息，即1和0</li>\n</ul>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><ul>\n<li>基本数据类型<ul>\n<li>整形<ul>\n<li>byte</li>\n<li>short</li>\n<li>int</li>\n<li>long</li>\n</ul>\n</li>\n<li>浮点型<ul>\n<li>float</li>\n<li>double</li>\n</ul>\n</li>\n<li>字符<ul>\n<li>char</li>\n</ul>\n</li>\n<li>布尔型<ul>\n<li>boolean</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>引用数据类型<ul>\n<li>string</li>\n<li>class</li>\n<li>interface</li>\n<li>list</li>\n<li>map</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><ul>\n<li>数据范围大小：<ul>\n<li>double&gt;float&gt;long&gt;int&gt;short=char&gt;byte</li>\n</ul>\n</li>\n<li>自动转换（小转大）<ul>\n<li>示例：<ul>\n<li>double a = 10;</li>\n</ul>\n</li>\n<li>注意：<ul>\n<li>byte不能自动转换成char</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>强制转换（大转小）<ul>\n<li>示例：<ul>\n<li>int a = (int)1.1;</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"存储单位\"><a href=\"#存储单位\" class=\"headerlink\" title=\"存储单位\"></a>存储单位</h3><ul>\n<li>8 bit = 1 Byte 一字节</li>\n<li>1024 B = 1 KB （KiloByte） 千字节</li>\n<li>1024 KB = 1 MB （MegaByte） 兆字节</li>\n<li>1024 MB = 1 GB （GigaByte） 吉字节</li>\n<li>1024 GB = 1 TB （TeraByte） 太字节</li>\n<li>1024 TB = 1 PB （PetaByte） 拍字节</li>\n<li>1024 PB = 1 EB （ExaByte） 艾字节</li>\n<li>1024 EB = 1 ZB （ZetaByte） 泽字节</li>\n<li>1024 ZB = 1 YB （YottaByte） 尧字节</li>\n<li>1024 YB = 1BB（Brontobyte）珀字节</li>\n<li>1024 BB = 1 NB （NonaByte） 诺字节</li>\n<li>1024 NB = 1 DB （DoggaByte）刀字节</li>\n</ul>\n<h3 id=\"字节（Byte）\"><a href=\"#字节（Byte）\" class=\"headerlink\" title=\"字节（Byte）\"></a>字节（Byte）</h3><ul>\n<li>计算机最小存储单元</li>\n<li>可存储开和关信息，即1和0</li>\n</ul>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><ul>\n<li>基本数据类型<ul>\n<li>整形<ul>\n<li>byte</li>\n<li>short</li>\n<li>int</li>\n<li>long</li>\n</ul>\n</li>\n<li>浮点型<ul>\n<li>float</li>\n<li>double</li>\n</ul>\n</li>\n<li>字符<ul>\n<li>char</li>\n</ul>\n</li>\n<li>布尔型<ul>\n<li>boolean</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>引用数据类型<ul>\n<li>string</li>\n<li>class</li>\n<li>interface</li>\n<li>list</li>\n<li>map</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><ul>\n<li>数据范围大小：<ul>\n<li>double&gt;float&gt;long&gt;int&gt;short=char&gt;byte</li>\n</ul>\n</li>\n<li>自动转换（小转大）<ul>\n<li>示例：<ul>\n<li>double a = 10;</li>\n</ul>\n</li>\n<li>注意：<ul>\n<li>byte不能自动转换成char</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>强制转换（大转小）<ul>\n<li>示例：<ul>\n<li>int a = (int)1.1;</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"多线程","date":"2021-08-31T13:43:37.000Z","_content":"\n### 实现方式\n* JVM的多线程是通过线程轮流切换分配处理器的执行时间来实现的，在任何一个确定的时刻，一个处理器核心只执行一个线程中的指令\n\n### 线程通信\n* 主要方式\n    * 消息传递\n    * 共享内存\n* Java采用共享内存方式","source":"_posts/Java/多线程.md","raw":"---\ntitle: 多线程\ndate: 2021-08-31 21:43:37\ntags: 编程\ncategories:\n- [Java]\n---\n\n### 实现方式\n* JVM的多线程是通过线程轮流切换分配处理器的执行时间来实现的，在任何一个确定的时刻，一个处理器核心只执行一个线程中的指令\n\n### 线程通信\n* 主要方式\n    * 消息传递\n    * 共享内存\n* Java采用共享内存方式","slug":"Java/多线程","published":1,"updated":"2021-10-03T12:41:34.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl306000pwx6q1dta0ey5","content":"<h3 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h3><ul>\n<li>JVM的多线程是通过线程轮流切换分配处理器的执行时间来实现的，在任何一个确定的时刻，一个处理器核心只执行一个线程中的指令</li>\n</ul>\n<h3 id=\"线程通信\"><a href=\"#线程通信\" class=\"headerlink\" title=\"线程通信\"></a>线程通信</h3><ul>\n<li>主要方式<ul>\n<li>消息传递</li>\n<li>共享内存</li>\n</ul>\n</li>\n<li>Java采用共享内存方式</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h3><ul>\n<li>JVM的多线程是通过线程轮流切换分配处理器的执行时间来实现的，在任何一个确定的时刻，一个处理器核心只执行一个线程中的指令</li>\n</ul>\n<h3 id=\"线程通信\"><a href=\"#线程通信\" class=\"headerlink\" title=\"线程通信\"></a>线程通信</h3><ul>\n<li>主要方式<ul>\n<li>消息传递</li>\n<li>共享内存</li>\n</ul>\n</li>\n<li>Java采用共享内存方式</li>\n</ul>\n"},{"title":"数组","date":"2021-08-31T02:59:44.000Z","_content":"\n### 初始化\n* 动态初始化：\n    * int[] arr = new int[100];\n        * 即设定数组长度之后，编译器可以自动完成内存分配与初始值设定，初始值跟数据类型相关\n* 静态初始化：\n    * int[] arr = {1, 2, 3};\n        * 初始化相关元素，不初始化数组长度\n\n### 异常\n* 索引越界\n* 空指针异常\n\n\n### ArrayList\n* 特点：\n    * 可调整大小\n    * ArrayList<E>中的E指泛型","source":"_posts/Java/数组.md","raw":"---\ntitle: 数组\ndate: 2021-08-31 10:59:44\ntags: 编程\ncategories:\n- [Java]\n---\n\n### 初始化\n* 动态初始化：\n    * int[] arr = new int[100];\n        * 即设定数组长度之后，编译器可以自动完成内存分配与初始值设定，初始值跟数据类型相关\n* 静态初始化：\n    * int[] arr = {1, 2, 3};\n        * 初始化相关元素，不初始化数组长度\n\n### 异常\n* 索引越界\n* 空指针异常\n\n\n### ArrayList\n* 特点：\n    * 可调整大小\n    * ArrayList<E>中的E指泛型","slug":"Java/数组","published":1,"updated":"2021-10-03T13:31:45.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl307000swx6q0wfigozz","content":"<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><ul>\n<li>动态初始化：<ul>\n<li>int[] arr = new int[100];<ul>\n<li>即设定数组长度之后，编译器可以自动完成内存分配与初始值设定，初始值跟数据类型相关</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>静态初始化：<ul>\n<li>int[] arr = {1, 2, 3};<ul>\n<li>初始化相关元素，不初始化数组长度</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><ul>\n<li>索引越界</li>\n<li>空指针异常</li>\n</ul>\n<h3 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h3><ul>\n<li>特点：<ul>\n<li>可调整大小</li>\n<li>ArrayList<E>中的E指泛型</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><ul>\n<li>动态初始化：<ul>\n<li>int[] arr = new int[100];<ul>\n<li>即设定数组长度之后，编译器可以自动完成内存分配与初始值设定，初始值跟数据类型相关</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>静态初始化：<ul>\n<li>int[] arr = {1, 2, 3};<ul>\n<li>初始化相关元素，不初始化数组长度</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><ul>\n<li>索引越界</li>\n<li>空指针异常</li>\n</ul>\n<h3 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h3><ul>\n<li>特点：<ul>\n<li>可调整大小</li>\n<li>ArrayList<E>中的E指泛型</li>\n</ul>\n</li>\n</ul>\n"},{"title":"流程控制","date":"2021-08-30T11:42:38.000Z","_content":"\n### 分类\n* 顺序\n* 循环\n    * for\n    * while\n    * do...while\n* 分支\n    * if\n    * switch\n    \n### 特殊点\n* 死循环写法\n```\nfor(;;) {}\nwhile(true){}\n```\n* break\n    * 终止循环\n* continue\n    * 终止本次循环\n    \n    \n\n\n","source":"_posts/Java/流程控制.md","raw":"---\ntitle: 流程控制\ndate: 2021-08-30 19:42:38\ntags: 编程\ncategories:\n- [Java]\n---\n\n### 分类\n* 顺序\n* 循环\n    * for\n    * while\n    * do...while\n* 分支\n    * if\n    * switch\n    \n### 特殊点\n* 死循环写法\n```\nfor(;;) {}\nwhile(true){}\n```\n* break\n    * 终止循环\n* continue\n    * 终止本次循环\n    \n    \n\n\n","slug":"Java/流程控制","published":1,"updated":"2021-10-03T12:41:34.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl308000vwx6qaxob88y3","content":"<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>顺序</li>\n<li>循环<ul>\n<li>for</li>\n<li>while</li>\n<li>do…while</li>\n</ul>\n</li>\n<li>分支<ul>\n<li>if</li>\n<li>switch</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"特殊点\"><a href=\"#特殊点\" class=\"headerlink\" title=\"特殊点\"></a>特殊点</h3><ul>\n<li>死循环写法<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(;;) &#123;&#125;</span><br><span class=\"line\">while(true)&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>break<ul>\n<li>终止循环</li>\n</ul>\n</li>\n<li>continue<ul>\n<li>终止本次循环</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>顺序</li>\n<li>循环<ul>\n<li>for</li>\n<li>while</li>\n<li>do…while</li>\n</ul>\n</li>\n<li>分支<ul>\n<li>if</li>\n<li>switch</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"特殊点\"><a href=\"#特殊点\" class=\"headerlink\" title=\"特殊点\"></a>特殊点</h3><ul>\n<li>死循环写法<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(;;) &#123;&#125;</span><br><span class=\"line\">while(true)&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li>break<ul>\n<li>终止循环</li>\n</ul>\n</li>\n<li>continue<ul>\n<li>终止本次循环</li>\n</ul>\n</li>\n</ul>\n"},{"title":"继承","date":"2021-10-10T07:26:55.000Z","_content":"\n### 利弊\n* 利\n    * 代码复用性\n    * 代码可维护性\n* 弊\n    * 削弱子类独立性\n    * 类之间耦合性大\n    \n### 特点\n* 子类任何构造方法均调动父类无参构造方法，目的是为了完成父类对象的创建与初始化，保证子类使用父类属性与方法不会出错，相当于默认调用了super()\n* 子类重写方法访问权限需要大于等于父类方法\n* 单继承\n\n","source":"_posts/Java/继承.md","raw":"---\ntitle: 继承\ndate: 2021-10-10 15:26:55\ntags: 编程\ncategories:\n- [Java]\n---\n\n### 利弊\n* 利\n    * 代码复用性\n    * 代码可维护性\n* 弊\n    * 削弱子类独立性\n    * 类之间耦合性大\n    \n### 特点\n* 子类任何构造方法均调动父类无参构造方法，目的是为了完成父类对象的创建与初始化，保证子类使用父类属性与方法不会出错，相当于默认调用了super()\n* 子类重写方法访问权限需要大于等于父类方法\n* 单继承\n\n","slug":"Java/继承","published":1,"updated":"2021-10-10T08:43:00.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl30a000ywx6q0m92e741","content":"<h3 id=\"利弊\"><a href=\"#利弊\" class=\"headerlink\" title=\"利弊\"></a>利弊</h3><ul>\n<li>利<ul>\n<li>代码复用性</li>\n<li>代码可维护性</li>\n</ul>\n</li>\n<li>弊<ul>\n<li>削弱子类独立性</li>\n<li>类之间耦合性大</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>子类任何构造方法均调动父类无参构造方法，目的是为了完成父类对象的创建与初始化，保证子类使用父类属性与方法不会出错，相当于默认调用了super()</li>\n<li>子类重写方法访问权限需要大于等于父类方法</li>\n<li>单继承</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"利弊\"><a href=\"#利弊\" class=\"headerlink\" title=\"利弊\"></a>利弊</h3><ul>\n<li>利<ul>\n<li>代码复用性</li>\n<li>代码可维护性</li>\n</ul>\n</li>\n<li>弊<ul>\n<li>削弱子类独立性</li>\n<li>类之间耦合性大</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>子类任何构造方法均调动父类无参构造方法，目的是为了完成父类对象的创建与初始化，保证子类使用父类属性与方法不会出错，相当于默认调用了super()</li>\n<li>子类重写方法访问权限需要大于等于父类方法</li>\n<li>单继承</li>\n</ul>\n"},{"title":"运算符","date":"2021-08-27T08:08:51.000Z","_content":"\n### 概念\n* 运算符：\n  * 在表达式中表示计算的符号\n* 表达式：\n  * 由运算符、变量、常量等组成的有意义的组合\n\n### 算数运算符\n* 组成：\n  * +\n  * -\n  * \\*\n  * \\\\\n  * \\%\n* 总结：\n  * char运算时会转换为ASCII码的值\n  * 多个类型运算时，结果为最大范围类型\n  * 从左到右顺序执行\n    * 例：1 + 2 + \"abc\" = \"3abc\"\n    * 例：\"abc\" + 1 + 2 = \"abc12\"\n\n### 赋值运算符\n* 组成：\n  * =\n* 总结：\n  * 可搭配其他运算符使用，例 +=、-=等，+=类似的赋值运算符内隐含强制类型转换\n\n### 自增、自减运算符\n* 组成\n    * ++\n    * --\n* 总结：\n    * 在参与复杂表达式中时，按顺序执行，++在前，先赋值，++在后，先+1，--同理\n    \n### 关系运算符\n* 组成：\n    * ==\n    * !=\n    * \\>\n    * \\>=\n    * <\n    * <=\n* 总结：\n    * 结果为boolean\n     \n### 逻辑运算符\n* 组成：\n    * &\n    * |\n    * !\n    * ^\n    * 短路逻辑运算符：\n        * &&\n        * ||\n* 总结：\n    * 逻辑运算符是用来连接最终结果为boolean的表达式的\n    * 逻辑运算符前后的表达式结果为boolean\n    * 短路逻辑运算符有短路效果，如果第一个表达式就能确定最终结果，后面的表达式即不执行\n    \n### 三元运算符\n* 组成：\n    * 例：a > b ? a : b;\n     ","source":"_posts/Java/运算符.md","raw":"---\ntitle: 运算符\ndate: 2021-08-27 16:08:51\ntags: 编程\ncategories:\n- [Java]\n---\n\n### 概念\n* 运算符：\n  * 在表达式中表示计算的符号\n* 表达式：\n  * 由运算符、变量、常量等组成的有意义的组合\n\n### 算数运算符\n* 组成：\n  * +\n  * -\n  * \\*\n  * \\\\\n  * \\%\n* 总结：\n  * char运算时会转换为ASCII码的值\n  * 多个类型运算时，结果为最大范围类型\n  * 从左到右顺序执行\n    * 例：1 + 2 + \"abc\" = \"3abc\"\n    * 例：\"abc\" + 1 + 2 = \"abc12\"\n\n### 赋值运算符\n* 组成：\n  * =\n* 总结：\n  * 可搭配其他运算符使用，例 +=、-=等，+=类似的赋值运算符内隐含强制类型转换\n\n### 自增、自减运算符\n* 组成\n    * ++\n    * --\n* 总结：\n    * 在参与复杂表达式中时，按顺序执行，++在前，先赋值，++在后，先+1，--同理\n    \n### 关系运算符\n* 组成：\n    * ==\n    * !=\n    * \\>\n    * \\>=\n    * <\n    * <=\n* 总结：\n    * 结果为boolean\n     \n### 逻辑运算符\n* 组成：\n    * &\n    * |\n    * !\n    * ^\n    * 短路逻辑运算符：\n        * &&\n        * ||\n* 总结：\n    * 逻辑运算符是用来连接最终结果为boolean的表达式的\n    * 逻辑运算符前后的表达式结果为boolean\n    * 短路逻辑运算符有短路效果，如果第一个表达式就能确定最终结果，后面的表达式即不执行\n    \n### 三元运算符\n* 组成：\n    * 例：a > b ? a : b;\n     ","slug":"Java/运算符","published":1,"updated":"2021-10-03T12:41:34.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl30b0011wx6qc792a1bh","content":"<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ul>\n<li>运算符：<ul>\n<li>在表达式中表示计算的符号</li>\n</ul>\n</li>\n<li>表达式：<ul>\n<li>由运算符、变量、常量等组成的有意义的组合</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h3><ul>\n<li>组成：<ul>\n<li>+</li>\n<li>-</li>\n<li>*</li>\n<li>\\</li>\n<li>%</li>\n</ul>\n</li>\n<li>总结：<ul>\n<li>char运算时会转换为ASCII码的值</li>\n<li>多个类型运算时，结果为最大范围类型</li>\n<li>从左到右顺序执行<ul>\n<li>例：1 + 2 + “abc” = “3abc”</li>\n<li>例：”abc” + 1 + 2 = “abc12”</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><ul>\n<li>组成：<ul>\n<li>=</li>\n</ul>\n</li>\n<li>总结：<ul>\n<li>可搭配其他运算符使用，例 +=、-=等，+=类似的赋值运算符内隐含强制类型转换</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"自增、自减运算符\"><a href=\"#自增、自减运算符\" class=\"headerlink\" title=\"自增、自减运算符\"></a>自增、自减运算符</h3><ul>\n<li>组成<ul>\n<li>++</li>\n<li>–</li>\n</ul>\n</li>\n<li>总结：<ul>\n<li>在参与复杂表达式中时，按顺序执行，++在前，先赋值，++在后，先+1，–同理</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><ul>\n<li>组成：<ul>\n<li>==</li>\n<li>!=</li>\n<li>&gt;</li>\n<li>&gt;=</li>\n<li>&lt;</li>\n<li>&lt;=</li>\n</ul>\n</li>\n<li>总结：<ul>\n<li>结果为boolean</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><ul>\n<li>组成：<ul>\n<li>&amp;</li>\n<li>|</li>\n<li>!</li>\n<li>^</li>\n<li>短路逻辑运算符：<ul>\n<li>&amp;&amp;</li>\n<li>||</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>总结：<ul>\n<li>逻辑运算符是用来连接最终结果为boolean的表达式的</li>\n<li>逻辑运算符前后的表达式结果为boolean</li>\n<li>短路逻辑运算符有短路效果，如果第一个表达式就能确定最终结果，后面的表达式即不执行</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三元运算符\"><a href=\"#三元运算符\" class=\"headerlink\" title=\"三元运算符\"></a>三元运算符</h3><ul>\n<li>组成：<ul>\n<li>例：a &gt; b ? a : b;</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ul>\n<li>运算符：<ul>\n<li>在表达式中表示计算的符号</li>\n</ul>\n</li>\n<li>表达式：<ul>\n<li>由运算符、变量、常量等组成的有意义的组合</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h3><ul>\n<li>组成：<ul>\n<li>+</li>\n<li>-</li>\n<li>*</li>\n<li>\\</li>\n<li>%</li>\n</ul>\n</li>\n<li>总结：<ul>\n<li>char运算时会转换为ASCII码的值</li>\n<li>多个类型运算时，结果为最大范围类型</li>\n<li>从左到右顺序执行<ul>\n<li>例：1 + 2 + “abc” = “3abc”</li>\n<li>例：”abc” + 1 + 2 = “abc12”</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><ul>\n<li>组成：<ul>\n<li>=</li>\n</ul>\n</li>\n<li>总结：<ul>\n<li>可搭配其他运算符使用，例 +=、-=等，+=类似的赋值运算符内隐含强制类型转换</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"自增、自减运算符\"><a href=\"#自增、自减运算符\" class=\"headerlink\" title=\"自增、自减运算符\"></a>自增、自减运算符</h3><ul>\n<li>组成<ul>\n<li>++</li>\n<li>–</li>\n</ul>\n</li>\n<li>总结：<ul>\n<li>在参与复杂表达式中时，按顺序执行，++在前，先赋值，++在后，先+1，–同理</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><ul>\n<li>组成：<ul>\n<li>==</li>\n<li>!=</li>\n<li>&gt;</li>\n<li>&gt;=</li>\n<li>&lt;</li>\n<li>&lt;=</li>\n</ul>\n</li>\n<li>总结：<ul>\n<li>结果为boolean</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><ul>\n<li>组成：<ul>\n<li>&amp;</li>\n<li>|</li>\n<li>!</li>\n<li>^</li>\n<li>短路逻辑运算符：<ul>\n<li>&amp;&amp;</li>\n<li>||</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>总结：<ul>\n<li>逻辑运算符是用来连接最终结果为boolean的表达式的</li>\n<li>逻辑运算符前后的表达式结果为boolean</li>\n<li>短路逻辑运算符有短路效果，如果第一个表达式就能确定最终结果，后面的表达式即不执行</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三元运算符\"><a href=\"#三元运算符\" class=\"headerlink\" title=\"三元运算符\"></a>三元运算符</h3><ul>\n<li>组成：<ul>\n<li>例：a &gt; b ? a : b;</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Linux常用命令总结","date":"2021-09-09T02:26:09.000Z","_content":"\n### cat\n* 显示文件最后10行：cat filename | tail -n 10\n* 显示文件前10行：cat filename | head -n 10\n* 从10行开始显示，显示10行以后的所有行：cat filename | tail -n +10\n* 显示10行到50行：cat filename | head -n 50 | tail -n +10  \n* 在filename1 和 filename2中查找xxx关键字：cat filename1 filename2 | grep xxx\n* 模糊匹配aaaa开头的文件并在这些文件中查找xxx关键字：cat aaaa*.log | grep xxx\n* 模糊匹配aaaa开头的文件并在这些文件中查找xxx关键字统计出现次数：cat aaaa*.log | grep xxx -c \n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n    \n\n    \n\n\n\n","source":"_posts/Linux/Linux常用命令总结.md","raw":"---\ntitle: Linux常用命令总结\ndate: 2021-09-09 10:26:09\ntags: 编程\ncategories:\n- [Linux]\n---\n\n### cat\n* 显示文件最后10行：cat filename | tail -n 10\n* 显示文件前10行：cat filename | head -n 10\n* 从10行开始显示，显示10行以后的所有行：cat filename | tail -n +10\n* 显示10行到50行：cat filename | head -n 50 | tail -n +10  \n* 在filename1 和 filename2中查找xxx关键字：cat filename1 filename2 | grep xxx\n* 模糊匹配aaaa开头的文件并在这些文件中查找xxx关键字：cat aaaa*.log | grep xxx\n* 模糊匹配aaaa开头的文件并在这些文件中查找xxx关键字统计出现次数：cat aaaa*.log | grep xxx -c \n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n    \n\n    \n\n\n\n","slug":"Linux/Linux常用命令总结","published":1,"updated":"2021-10-03T12:41:34.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl30c0014wx6qhz159umq","content":"<h3 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h3><ul>\n<li>显示文件最后10行：cat filename | tail -n 10</li>\n<li>显示文件前10行：cat filename | head -n 10</li>\n<li>从10行开始显示，显示10行以后的所有行：cat filename | tail -n +10</li>\n<li>显示10行到50行：cat filename | head -n 50 | tail -n +10  </li>\n<li>在filename1 和 filename2中查找xxx关键字：cat filename1 filename2 | grep xxx</li>\n<li>模糊匹配aaaa开头的文件并在这些文件中查找xxx关键字：cat aaaa*.log | grep xxx</li>\n<li>模糊匹配aaaa开头的文件并在这些文件中查找xxx关键字统计出现次数：cat aaaa*.log | grep xxx -c </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h3><ul>\n<li>显示文件最后10行：cat filename | tail -n 10</li>\n<li>显示文件前10行：cat filename | head -n 10</li>\n<li>从10行开始显示，显示10行以后的所有行：cat filename | tail -n +10</li>\n<li>显示10行到50行：cat filename | head -n 50 | tail -n +10  </li>\n<li>在filename1 和 filename2中查找xxx关键字：cat filename1 filename2 | grep xxx</li>\n<li>模糊匹配aaaa开头的文件并在这些文件中查找xxx关键字：cat aaaa*.log | grep xxx</li>\n<li>模糊匹配aaaa开头的文件并在这些文件中查找xxx关键字统计出现次数：cat aaaa*.log | grep xxx -c </li>\n</ul>\n"},{"title":"Markdown指南","date":"2021-08-27T08:07:38.000Z","_content":"[参考文章](https://www.markdown.xyz/getting-started/)\n","source":"_posts/blogTutorial/Markdown指南.md","raw":"---\ntitle: Markdown指南\ndate: 2021-08-27 16:07:38\ntags: 博客搭建\ncategories:\n- [博客搭建]\n---\n[参考文章](https://www.markdown.xyz/getting-started/)\n","slug":"blogTutorial/Markdown指南","published":1,"updated":"2021-10-03T12:41:34.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl30e0017wx6q510c8ho5","content":"<p><a href=\"https://www.markdown.xyz/getting-started/\">参考文章</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.markdown.xyz/getting-started/\">参考文章</a></p>\n"},{"title":"博客搭建","date":"2021-08-24T02:52:32.000Z","_content":"\n\n```\n以下相关讲解均基于hexo + github pages方案，请注意！！！\n```\n\n\n### 博客搭建方案选择\n* [参考文章1](https://www.cnblogs.com/panchanggui/p/12483459.html)\n\n### 搭建教程\n* [参考文章1](https://zhuanlan.zhihu.com/p/26625249)\n\n### hexo + github pages搭建过程中遇到的问题\n#### 删除categories、tags\n1、删除含有需要删除categories、tags的文章\n2、hexo clean\n3、hexo s\n4、hexo g\n\n#### Support for password authentication was removed on August 13, 2021. Please use a personal access token instead\n  * github 不再支持password，必须使用Personal access tokens\n    * [参考文章1](http://odcowl.com/2021/08/16/Hexo%E5%8D%9A%E5%AE%A2%EF%BC%9Agithub%E4%B8%8D%E5%86%8D%E6%94%AF%E6%8C%81%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%882021-8-13%E6%9B%B4%E6%96%B0/)\n\n\n#### No layout: index.html\n  * 可能是主题未正确安装的问题\n    * [安装主题参考](https://www.haomwei.com/technology/maupassant-hexo.html)\n\n\n#### fatal: in unpopulated submodule '.deploy_git'\n  * 删除.deploy_git(rm -rf .deploy_git/)，然后重新hexo d\n\n\n### 技巧\n#### 如何保存原始文章：\n* 目前笔者采用的方式是，在github上新建一个专门用来保存原始文章的分支，然后将原始文章push到这个分支上\n* push脚本：\n    ```\n        hexo clean;\n        git add .;\n        git commit -m \"博客文章更新\";\n        git push;\n        hexo g;\n        hexo d;\n    ```","source":"_posts/blogTutorial/博客搭建.md","raw":"---\ntitle: 博客搭建\ndate: 2021-08-24 10:52:32\ntags: 博客搭建\ncategories:\n- [博客搭建]\n---\n\n\n```\n以下相关讲解均基于hexo + github pages方案，请注意！！！\n```\n\n\n### 博客搭建方案选择\n* [参考文章1](https://www.cnblogs.com/panchanggui/p/12483459.html)\n\n### 搭建教程\n* [参考文章1](https://zhuanlan.zhihu.com/p/26625249)\n\n### hexo + github pages搭建过程中遇到的问题\n#### 删除categories、tags\n1、删除含有需要删除categories、tags的文章\n2、hexo clean\n3、hexo s\n4、hexo g\n\n#### Support for password authentication was removed on August 13, 2021. Please use a personal access token instead\n  * github 不再支持password，必须使用Personal access tokens\n    * [参考文章1](http://odcowl.com/2021/08/16/Hexo%E5%8D%9A%E5%AE%A2%EF%BC%9Agithub%E4%B8%8D%E5%86%8D%E6%94%AF%E6%8C%81%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%882021-8-13%E6%9B%B4%E6%96%B0/)\n\n\n#### No layout: index.html\n  * 可能是主题未正确安装的问题\n    * [安装主题参考](https://www.haomwei.com/technology/maupassant-hexo.html)\n\n\n#### fatal: in unpopulated submodule '.deploy_git'\n  * 删除.deploy_git(rm -rf .deploy_git/)，然后重新hexo d\n\n\n### 技巧\n#### 如何保存原始文章：\n* 目前笔者采用的方式是，在github上新建一个专门用来保存原始文章的分支，然后将原始文章push到这个分支上\n* push脚本：\n    ```\n        hexo clean;\n        git add .;\n        git commit -m \"博客文章更新\";\n        git push;\n        hexo g;\n        hexo d;\n    ```","slug":"blogTutorial/博客搭建","published":1,"updated":"2021-10-03T12:41:34.543Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl30f001awx6qbywr2x6t","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下相关讲解均基于hexo + github pages方案，请注意！！！</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"博客搭建方案选择\"><a href=\"#博客搭建方案选择\" class=\"headerlink\" title=\"博客搭建方案选择\"></a>博客搭建方案选择</h3><ul>\n<li><a href=\"https://www.cnblogs.com/panchanggui/p/12483459.html\">参考文章1</a></li>\n</ul>\n<h3 id=\"搭建教程\"><a href=\"#搭建教程\" class=\"headerlink\" title=\"搭建教程\"></a>搭建教程</h3><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/26625249\">参考文章1</a></li>\n</ul>\n<h3 id=\"hexo-github-pages搭建过程中遇到的问题\"><a href=\"#hexo-github-pages搭建过程中遇到的问题\" class=\"headerlink\" title=\"hexo + github pages搭建过程中遇到的问题\"></a>hexo + github pages搭建过程中遇到的问题</h3><h4 id=\"删除categories、tags\"><a href=\"#删除categories、tags\" class=\"headerlink\" title=\"删除categories、tags\"></a>删除categories、tags</h4><p>1、删除含有需要删除categories、tags的文章<br>2、hexo clean<br>3、hexo s<br>4、hexo g</p>\n<h4 id=\"Support-for-password-authentication-was-removed-on-August-13-2021-Please-use-a-personal-access-token-instead\"><a href=\"#Support-for-password-authentication-was-removed-on-August-13-2021-Please-use-a-personal-access-token-instead\" class=\"headerlink\" title=\"Support for password authentication was removed on August 13, 2021. Please use a personal access token instead\"></a>Support for password authentication was removed on August 13, 2021. Please use a personal access token instead</h4><ul>\n<li>github 不再支持password，必须使用Personal access tokens<ul>\n<li><a href=\"http://odcowl.com/2021/08/16/Hexo%E5%8D%9A%E5%AE%A2%EF%BC%9Agithub%E4%B8%8D%E5%86%8D%E6%94%AF%E6%8C%81%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%882021-8-13%E6%9B%B4%E6%96%B0/\">参考文章1</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"No-layout-index-html\"><a href=\"#No-layout-index-html\" class=\"headerlink\" title=\"No layout: index.html\"></a>No layout: index.html</h4><ul>\n<li>可能是主题未正确安装的问题<ul>\n<li><a href=\"https://www.haomwei.com/technology/maupassant-hexo.html\">安装主题参考</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"fatal-in-unpopulated-submodule-‘-deploy-git’\"><a href=\"#fatal-in-unpopulated-submodule-‘-deploy-git’\" class=\"headerlink\" title=\"fatal: in unpopulated submodule ‘.deploy_git’\"></a>fatal: in unpopulated submodule ‘.deploy_git’</h4><ul>\n<li>删除.deploy_git(rm -rf .deploy_git/)，然后重新hexo d</li>\n</ul>\n<h3 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h3><h4 id=\"如何保存原始文章：\"><a href=\"#如何保存原始文章：\" class=\"headerlink\" title=\"如何保存原始文章：\"></a>如何保存原始文章：</h4><ul>\n<li>目前笔者采用的方式是，在github上新建一个专门用来保存原始文章的分支，然后将原始文章push到这个分支上</li>\n<li>push脚本：  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean;</span><br><span class=\"line\">git add .;</span><br><span class=\"line\">git commit -m &quot;博客文章更新&quot;;</span><br><span class=\"line\">git push;</span><br><span class=\"line\">hexo g;</span><br><span class=\"line\">hexo d;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下相关讲解均基于hexo + github pages方案，请注意！！！</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"博客搭建方案选择\"><a href=\"#博客搭建方案选择\" class=\"headerlink\" title=\"博客搭建方案选择\"></a>博客搭建方案选择</h3><ul>\n<li><a href=\"https://www.cnblogs.com/panchanggui/p/12483459.html\">参考文章1</a></li>\n</ul>\n<h3 id=\"搭建教程\"><a href=\"#搭建教程\" class=\"headerlink\" title=\"搭建教程\"></a>搭建教程</h3><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/26625249\">参考文章1</a></li>\n</ul>\n<h3 id=\"hexo-github-pages搭建过程中遇到的问题\"><a href=\"#hexo-github-pages搭建过程中遇到的问题\" class=\"headerlink\" title=\"hexo + github pages搭建过程中遇到的问题\"></a>hexo + github pages搭建过程中遇到的问题</h3><h4 id=\"删除categories、tags\"><a href=\"#删除categories、tags\" class=\"headerlink\" title=\"删除categories、tags\"></a>删除categories、tags</h4><p>1、删除含有需要删除categories、tags的文章<br>2、hexo clean<br>3、hexo s<br>4、hexo g</p>\n<h4 id=\"Support-for-password-authentication-was-removed-on-August-13-2021-Please-use-a-personal-access-token-instead\"><a href=\"#Support-for-password-authentication-was-removed-on-August-13-2021-Please-use-a-personal-access-token-instead\" class=\"headerlink\" title=\"Support for password authentication was removed on August 13, 2021. Please use a personal access token instead\"></a>Support for password authentication was removed on August 13, 2021. Please use a personal access token instead</h4><ul>\n<li>github 不再支持password，必须使用Personal access tokens<ul>\n<li><a href=\"http://odcowl.com/2021/08/16/Hexo%E5%8D%9A%E5%AE%A2%EF%BC%9Agithub%E4%B8%8D%E5%86%8D%E6%94%AF%E6%8C%81%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%882021-8-13%E6%9B%B4%E6%96%B0/\">参考文章1</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"No-layout-index-html\"><a href=\"#No-layout-index-html\" class=\"headerlink\" title=\"No layout: index.html\"></a>No layout: index.html</h4><ul>\n<li>可能是主题未正确安装的问题<ul>\n<li><a href=\"https://www.haomwei.com/technology/maupassant-hexo.html\">安装主题参考</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"fatal-in-unpopulated-submodule-‘-deploy-git’\"><a href=\"#fatal-in-unpopulated-submodule-‘-deploy-git’\" class=\"headerlink\" title=\"fatal: in unpopulated submodule ‘.deploy_git’\"></a>fatal: in unpopulated submodule ‘.deploy_git’</h4><ul>\n<li>删除.deploy_git(rm -rf .deploy_git/)，然后重新hexo d</li>\n</ul>\n<h3 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h3><h4 id=\"如何保存原始文章：\"><a href=\"#如何保存原始文章：\" class=\"headerlink\" title=\"如何保存原始文章：\"></a>如何保存原始文章：</h4><ul>\n<li>目前笔者采用的方式是，在github上新建一个专门用来保存原始文章的分支，然后将原始文章push到这个分支上</li>\n<li>push脚本：  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean;</span><br><span class=\"line\">git add .;</span><br><span class=\"line\">git commit -m &quot;博客文章更新&quot;;</span><br><span class=\"line\">git push;</span><br><span class=\"line\">hexo g;</span><br><span class=\"line\">hexo d;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"redis","date":"2021-09-09T03:04:25.000Z","_content":"\n### 常用命令\n* 链接redis服务：redis-cli\n* 获取某个key（xxx）的数据：get xxx\n\n","source":"_posts/module/redis.md","raw":"---\ntitle: redis\ndate: 2021-09-09 11:04:25\ntags: 编程\ncategories:\n- [组件]\n---\n\n### 常用命令\n* 链接redis服务：redis-cli\n* 获取某个key（xxx）的数据：get xxx\n\n","slug":"module/redis","published":1,"updated":"2021-10-03T12:41:34.543Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl30h001fwx6qa9tb5bz5","content":"<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ul>\n<li>链接redis服务：redis-cli</li>\n<li>获取某个key（xxx）的数据：get xxx</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ul>\n<li>链接redis服务：redis-cli</li>\n<li>获取某个key（xxx）的数据：get xxx</li>\n</ul>\n"},{"title":"代码规范","date":"2021-08-26T13:10:44.000Z","_content":"\n## Java\n### 标识符命名\n* 小驼峰命名法\n  * 示例：studentName\n  * 适用：函数命名、变量命名、常量命名\n* 大驼峰命名法\n  * 示例：StudentName\n  * 适用：类命名、接口命名\n### 类定义\n* 类变量默认使用private\n","source":"_posts/codeStyle/代码规范.md","raw":"---\ntitle: 代码规范\ndate: 2021-08-26 21:10:44\ntags: 编程\ncategories:\n- [代码规范]\n---\n\n## Java\n### 标识符命名\n* 小驼峰命名法\n  * 示例：studentName\n  * 适用：函数命名、变量命名、常量命名\n* 大驼峰命名法\n  * 示例：StudentName\n  * 适用：类命名、接口命名\n### 类定义\n* 类变量默认使用private\n","slug":"codeStyle/代码规范","published":1,"updated":"2021-10-03T12:41:34.543Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl30i001iwx6q7y3d2z9q","content":"<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><h3 id=\"标识符命名\"><a href=\"#标识符命名\" class=\"headerlink\" title=\"标识符命名\"></a>标识符命名</h3><ul>\n<li>小驼峰命名法<ul>\n<li>示例：studentName</li>\n<li>适用：函数命名、变量命名、常量命名</li>\n</ul>\n</li>\n<li>大驼峰命名法<ul>\n<li>示例：StudentName</li>\n<li>适用：类命名、接口命名<h3 id=\"类定义\"><a href=\"#类定义\" class=\"headerlink\" title=\"类定义\"></a>类定义</h3></li>\n</ul>\n</li>\n<li>类变量默认使用private</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><h3 id=\"标识符命名\"><a href=\"#标识符命名\" class=\"headerlink\" title=\"标识符命名\"></a>标识符命名</h3><ul>\n<li>小驼峰命名法<ul>\n<li>示例：studentName</li>\n<li>适用：函数命名、变量命名、常量命名</li>\n</ul>\n</li>\n<li>大驼峰命名法<ul>\n<li>示例：StudentName</li>\n<li>适用：类命名、接口命名<h3 id=\"类定义\"><a href=\"#类定义\" class=\"headerlink\" title=\"类定义\"></a>类定义</h3></li>\n</ul>\n</li>\n<li>类变量默认使用private</li>\n</ul>\n"},{"title":"mac使用技巧","date":"2021-09-25T04:28:45.000Z","_content":"\n## 应用问题\n### g hub（罗技出品）卡在\"正在初始化\"问题\n* 问题原因：可能是已经安装过导致\n* 解决方法：删除电脑上lghub相关的文件，需要从Macintosh HD目录开始搜索\n\n## 系统技巧\n### 横向滑动技巧\n* shift+鼠标滚动\n","source":"_posts/toolApplication/mac使用记录.md","raw":"---\ntitle: mac使用技巧\ndate: 2021-09-25 12:28:45\ntags: 电脑使用技巧\ncategories:\n- [mac使用技巧]\n---\n\n## 应用问题\n### g hub（罗技出品）卡在\"正在初始化\"问题\n* 问题原因：可能是已经安装过导致\n* 解决方法：删除电脑上lghub相关的文件，需要从Macintosh HD目录开始搜索\n\n## 系统技巧\n### 横向滑动技巧\n* shift+鼠标滚动\n","slug":"toolApplication/mac使用记录","published":1,"updated":"2021-10-03T12:41:34.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl30k001mwx6q97kien1p","content":"<h2 id=\"应用问题\"><a href=\"#应用问题\" class=\"headerlink\" title=\"应用问题\"></a>应用问题</h2><h3 id=\"g-hub（罗技出品）卡在”正在初始化”问题\"><a href=\"#g-hub（罗技出品）卡在”正在初始化”问题\" class=\"headerlink\" title=\"g hub（罗技出品）卡在”正在初始化”问题\"></a>g hub（罗技出品）卡在”正在初始化”问题</h3><ul>\n<li>问题原因：可能是已经安装过导致</li>\n<li>解决方法：删除电脑上lghub相关的文件，需要从Macintosh HD目录开始搜索</li>\n</ul>\n<h2 id=\"系统技巧\"><a href=\"#系统技巧\" class=\"headerlink\" title=\"系统技巧\"></a>系统技巧</h2><h3 id=\"横向滑动技巧\"><a href=\"#横向滑动技巧\" class=\"headerlink\" title=\"横向滑动技巧\"></a>横向滑动技巧</h3><ul>\n<li>shift+鼠标滚动</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"应用问题\"><a href=\"#应用问题\" class=\"headerlink\" title=\"应用问题\"></a>应用问题</h2><h3 id=\"g-hub（罗技出品）卡在”正在初始化”问题\"><a href=\"#g-hub（罗技出品）卡在”正在初始化”问题\" class=\"headerlink\" title=\"g hub（罗技出品）卡在”正在初始化”问题\"></a>g hub（罗技出品）卡在”正在初始化”问题</h3><ul>\n<li>问题原因：可能是已经安装过导致</li>\n<li>解决方法：删除电脑上lghub相关的文件，需要从Macintosh HD目录开始搜索</li>\n</ul>\n<h2 id=\"系统技巧\"><a href=\"#系统技巧\" class=\"headerlink\" title=\"系统技巧\"></a>系统技巧</h2><h3 id=\"横向滑动技巧\"><a href=\"#横向滑动技巧\" class=\"headerlink\" title=\"横向滑动技巧\"></a>横向滑动技巧</h3><ul>\n<li>shift+鼠标滚动</li>\n</ul>\n"},{"title":"IDEA指南","date":"2021-08-31T02:39:05.000Z","_content":"\n### IDEA简介\n* 截止到2021.08.31，是全世界最流行的Java集成开发环境\n\n### tips\n#### 快捷键\n* ctrl + alt + v：快速生成方法返回值接收代码\n* /** + enter：生成javaDoc注释\n\n### IDEA常见error\n#### Error: java: System Java Compiler was not found in classpath\n* Project Settings > Compiler > Java Compiler \n    * changed the drop down Use compiler from Javac to Eclipse\n  \n#### Error:java: source level should be comprised in between '1.3' and '1.9' (or '5', '5.0', ..., '9' or '9.0'): 12\n* Preferences部分设置\n    * Preferences > Compiler > Java Compiler > Use compiler, 选javac\n    * Project bytecode version，选8，根据project sdk来确定\n    * Target bytecode version，选8，与Project bytecode version保持一致\n* Project structure部分设置\n    * Project structure > project > project sdk，选择1.8\n    * Project language level，选SDK default\n    * Modules > source > language level, 选Project default\n\n\n### IDEA 破解\n* [参考链接](https://www.cnblogs.com/vitual/p/11361406.html)\n","source":"_posts/toolApplication/IDEA指南.md","raw":"---\ntitle: IDEA指南\ndate: 2021-08-31 10:39:05\ntags: 编程\ncategories:\n- [工具应用]\n---\n\n### IDEA简介\n* 截止到2021.08.31，是全世界最流行的Java集成开发环境\n\n### tips\n#### 快捷键\n* ctrl + alt + v：快速生成方法返回值接收代码\n* /** + enter：生成javaDoc注释\n\n### IDEA常见error\n#### Error: java: System Java Compiler was not found in classpath\n* Project Settings > Compiler > Java Compiler \n    * changed the drop down Use compiler from Javac to Eclipse\n  \n#### Error:java: source level should be comprised in between '1.3' and '1.9' (or '5', '5.0', ..., '9' or '9.0'): 12\n* Preferences部分设置\n    * Preferences > Compiler > Java Compiler > Use compiler, 选javac\n    * Project bytecode version，选8，根据project sdk来确定\n    * Target bytecode version，选8，与Project bytecode version保持一致\n* Project structure部分设置\n    * Project structure > project > project sdk，选择1.8\n    * Project language level，选SDK default\n    * Modules > source > language level, 选Project default\n\n\n### IDEA 破解\n* [参考链接](https://www.cnblogs.com/vitual/p/11361406.html)\n","slug":"toolApplication/IDEA指南","published":1,"updated":"2021-10-10T08:28:14.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckulyl30l001qwx6qdk8wafj9","content":"<h3 id=\"IDEA简介\"><a href=\"#IDEA简介\" class=\"headerlink\" title=\"IDEA简介\"></a>IDEA简介</h3><ul>\n<li>截止到2021.08.31，是全世界最流行的Java集成开发环境</li>\n</ul>\n<h3 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h3><h4 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h4><ul>\n<li>ctrl + alt + v：快速生成方法返回值接收代码</li>\n<li>/** + enter：生成javaDoc注释</li>\n</ul>\n<h3 id=\"IDEA常见error\"><a href=\"#IDEA常见error\" class=\"headerlink\" title=\"IDEA常见error\"></a>IDEA常见error</h3><h4 id=\"Error-java-System-Java-Compiler-was-not-found-in-classpath\"><a href=\"#Error-java-System-Java-Compiler-was-not-found-in-classpath\" class=\"headerlink\" title=\"Error: java: System Java Compiler was not found in classpath\"></a>Error: java: System Java Compiler was not found in classpath</h4><ul>\n<li>Project Settings &gt; Compiler &gt; Java Compiler <ul>\n<li>changed the drop down Use compiler from Javac to Eclipse</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Error-java-source-level-should-be-comprised-in-between-‘1-3’-and-‘1-9’-or-‘5’-‘5-0’-…-‘9’-or-‘9-0’-12\"><a href=\"#Error-java-source-level-should-be-comprised-in-between-‘1-3’-and-‘1-9’-or-‘5’-‘5-0’-…-‘9’-or-‘9-0’-12\" class=\"headerlink\" title=\"Error:java: source level should be comprised in between ‘1.3’ and ‘1.9’ (or ‘5’, ‘5.0’, …, ‘9’ or ‘9.0’): 12\"></a>Error:java: source level should be comprised in between ‘1.3’ and ‘1.9’ (or ‘5’, ‘5.0’, …, ‘9’ or ‘9.0’): 12</h4><ul>\n<li>Preferences部分设置<ul>\n<li>Preferences &gt; Compiler &gt; Java Compiler &gt; Use compiler, 选javac</li>\n<li>Project bytecode version，选8，根据project sdk来确定</li>\n<li>Target bytecode version，选8，与Project bytecode version保持一致</li>\n</ul>\n</li>\n<li>Project structure部分设置<ul>\n<li>Project structure &gt; project &gt; project sdk，选择1.8</li>\n<li>Project language level，选SDK default</li>\n<li>Modules &gt; source &gt; language level, 选Project default</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"IDEA-破解\"><a href=\"#IDEA-破解\" class=\"headerlink\" title=\"IDEA 破解\"></a>IDEA 破解</h3><ul>\n<li><a href=\"https://www.cnblogs.com/vitual/p/11361406.html\">参考链接</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"IDEA简介\"><a href=\"#IDEA简介\" class=\"headerlink\" title=\"IDEA简介\"></a>IDEA简介</h3><ul>\n<li>截止到2021.08.31，是全世界最流行的Java集成开发环境</li>\n</ul>\n<h3 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h3><h4 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h4><ul>\n<li>ctrl + alt + v：快速生成方法返回值接收代码</li>\n<li>/** + enter：生成javaDoc注释</li>\n</ul>\n<h3 id=\"IDEA常见error\"><a href=\"#IDEA常见error\" class=\"headerlink\" title=\"IDEA常见error\"></a>IDEA常见error</h3><h4 id=\"Error-java-System-Java-Compiler-was-not-found-in-classpath\"><a href=\"#Error-java-System-Java-Compiler-was-not-found-in-classpath\" class=\"headerlink\" title=\"Error: java: System Java Compiler was not found in classpath\"></a>Error: java: System Java Compiler was not found in classpath</h4><ul>\n<li>Project Settings &gt; Compiler &gt; Java Compiler <ul>\n<li>changed the drop down Use compiler from Javac to Eclipse</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Error-java-source-level-should-be-comprised-in-between-‘1-3’-and-‘1-9’-or-‘5’-‘5-0’-…-‘9’-or-‘9-0’-12\"><a href=\"#Error-java-source-level-should-be-comprised-in-between-‘1-3’-and-‘1-9’-or-‘5’-‘5-0’-…-‘9’-or-‘9-0’-12\" class=\"headerlink\" title=\"Error:java: source level should be comprised in between ‘1.3’ and ‘1.9’ (or ‘5’, ‘5.0’, …, ‘9’ or ‘9.0’): 12\"></a>Error:java: source level should be comprised in between ‘1.3’ and ‘1.9’ (or ‘5’, ‘5.0’, …, ‘9’ or ‘9.0’): 12</h4><ul>\n<li>Preferences部分设置<ul>\n<li>Preferences &gt; Compiler &gt; Java Compiler &gt; Use compiler, 选javac</li>\n<li>Project bytecode version，选8，根据project sdk来确定</li>\n<li>Target bytecode version，选8，与Project bytecode version保持一致</li>\n</ul>\n</li>\n<li>Project structure部分设置<ul>\n<li>Project structure &gt; project &gt; project sdk，选择1.8</li>\n<li>Project language level，选SDK default</li>\n<li>Modules &gt; source &gt; language level, 选Project default</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"IDEA-破解\"><a href=\"#IDEA-破解\" class=\"headerlink\" title=\"IDEA 破解\"></a>IDEA 破解</h3><ul>\n<li><a href=\"https://www.cnblogs.com/vitual/p/11361406.html\">参考链接</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckulyl2zs0005wx6q1wb48p1n","category_id":"ckulyl2zr0004wx6qen38d6sb","_id":"ckulyl303000hwx6qcstaa58w"},{"post_id":"ckulyl2zf0000wx6qddy2dyie","category_id":"ckulyl2zr0004wx6qen38d6sb","_id":"ckulyl304000kwx6qg62zaz5q"},{"post_id":"ckulyl2zt0006wx6q3wg754pj","category_id":"ckulyl2zr0004wx6qen38d6sb","_id":"ckulyl306000nwx6q2b1shoau"},{"post_id":"ckulyl2zx000awx6q38ow2mpf","category_id":"ckulyl2zr0004wx6qen38d6sb","_id":"ckulyl307000qwx6q5ig8ey8y"},{"post_id":"ckulyl2zm0001wx6qc1ux50ua","category_id":"ckulyl2zr0004wx6qen38d6sb","_id":"ckulyl308000twx6q7p1nhc7m"},{"post_id":"ckulyl2zy000cwx6q87gjfidz","category_id":"ckulyl2zr0004wx6qen38d6sb","_id":"ckulyl309000wwx6q2gqvf9yn"},{"post_id":"ckulyl302000gwx6qeg8358vu","category_id":"ckulyl2zr0004wx6qen38d6sb","_id":"ckulyl30b000zwx6q44ci0mmt"},{"post_id":"ckulyl2zq0003wx6qbi3xbdwc","category_id":"ckulyl2zr0004wx6qen38d6sb","_id":"ckulyl30c0012wx6qd2rwf86o"},{"post_id":"ckulyl304000jwx6q8k1cb6bj","category_id":"ckulyl2zr0004wx6qen38d6sb","_id":"ckulyl30e0015wx6qe6e261so"},{"post_id":"ckulyl305000mwx6qai2ifzls","category_id":"ckulyl2zr0004wx6qen38d6sb","_id":"ckulyl30f0018wx6qgzkggp51"},{"post_id":"ckulyl306000pwx6q1dta0ey5","category_id":"ckulyl2zr0004wx6qen38d6sb","_id":"ckulyl30g001cwx6q75rhfo52"},{"post_id":"ckulyl307000swx6q0wfigozz","category_id":"ckulyl2zr0004wx6qen38d6sb","_id":"ckulyl30i001gwx6qdj0od7zr"},{"post_id":"ckulyl308000vwx6qaxob88y3","category_id":"ckulyl2zr0004wx6qen38d6sb","_id":"ckulyl30j001jwx6q6ysm56zt"},{"post_id":"ckulyl30a000ywx6q0m92e741","category_id":"ckulyl2zr0004wx6qen38d6sb","_id":"ckulyl30k001owx6q5rwm0sy0"},{"post_id":"ckulyl30b0011wx6qc792a1bh","category_id":"ckulyl2zr0004wx6qen38d6sb","_id":"ckulyl30m001rwx6q4ip282l7"},{"post_id":"ckulyl30c0014wx6qhz159umq","category_id":"ckulyl30g001bwx6q12z61l9m","_id":"ckulyl30n001vwx6q4yew2ff3"},{"post_id":"ckulyl30e0017wx6q510c8ho5","category_id":"ckulyl30j001kwx6q6a68artd","_id":"ckulyl30n001zwx6q8c4d8qfx"},{"post_id":"ckulyl30f001awx6qbywr2x6t","category_id":"ckulyl30j001kwx6q6a68artd","_id":"ckulyl30o0023wx6q01bc9yyv"},{"post_id":"ckulyl30h001fwx6qa9tb5bz5","category_id":"ckulyl30n001xwx6q5wdz30s3","_id":"ckulyl30p0025wx6q23wfejy8"},{"post_id":"ckulyl30i001iwx6q7y3d2z9q","category_id":"ckulyl30o0021wx6q3rg4dgf7","_id":"ckulyl30p0027wx6q1vrsbmno"},{"post_id":"ckulyl30k001mwx6q97kien1p","category_id":"ckulyl30o0024wx6q7clp7e36","_id":"ckulyl30p0028wx6q9ap1aoo4"},{"post_id":"ckulyl30l001qwx6qdk8wafj9","category_id":"ckulyl30p0026wx6q7qlm628n","_id":"ckulyl30p0029wx6q8w3hhrwo"}],"PostTag":[{"post_id":"ckulyl2zs0005wx6q1wb48p1n","tag_id":"ckulyl2zo0002wx6q4dtxenta","_id":"ckulyl2zx0009wx6qcl0qfg97"},{"post_id":"ckulyl2zf0000wx6qddy2dyie","tag_id":"ckulyl2zo0002wx6q4dtxenta","_id":"ckulyl2zy000bwx6qbbuvev9d"},{"post_id":"ckulyl2zt0006wx6q3wg754pj","tag_id":"ckulyl2zo0002wx6q4dtxenta","_id":"ckulyl302000fwx6qftxs8i11"},{"post_id":"ckulyl2zx000awx6q38ow2mpf","tag_id":"ckulyl2zo0002wx6q4dtxenta","_id":"ckulyl303000iwx6qbx6k1yuc"},{"post_id":"ckulyl2zm0001wx6qc1ux50ua","tag_id":"ckulyl2zo0002wx6q4dtxenta","_id":"ckulyl305000lwx6q15tfaf72"},{"post_id":"ckulyl2zy000cwx6q87gjfidz","tag_id":"ckulyl2zo0002wx6q4dtxenta","_id":"ckulyl306000owx6q3wsh3meu"},{"post_id":"ckulyl302000gwx6qeg8358vu","tag_id":"ckulyl2zo0002wx6q4dtxenta","_id":"ckulyl307000rwx6q622b9ws8"},{"post_id":"ckulyl2zq0003wx6qbi3xbdwc","tag_id":"ckulyl2zo0002wx6q4dtxenta","_id":"ckulyl308000uwx6qhokgd0bv"},{"post_id":"ckulyl304000jwx6q8k1cb6bj","tag_id":"ckulyl2zo0002wx6q4dtxenta","_id":"ckulyl30a000xwx6qepyefyxi"},{"post_id":"ckulyl305000mwx6qai2ifzls","tag_id":"ckulyl2zo0002wx6q4dtxenta","_id":"ckulyl30b0010wx6q4s91fkko"},{"post_id":"ckulyl306000pwx6q1dta0ey5","tag_id":"ckulyl2zo0002wx6q4dtxenta","_id":"ckulyl30c0013wx6qd8kud2rd"},{"post_id":"ckulyl307000swx6q0wfigozz","tag_id":"ckulyl2zo0002wx6q4dtxenta","_id":"ckulyl30e0016wx6qerrk6o2y"},{"post_id":"ckulyl308000vwx6qaxob88y3","tag_id":"ckulyl2zo0002wx6q4dtxenta","_id":"ckulyl30f0019wx6qcgzs1moo"},{"post_id":"ckulyl30a000ywx6q0m92e741","tag_id":"ckulyl2zo0002wx6q4dtxenta","_id":"ckulyl30h001ewx6qe9vr53rh"},{"post_id":"ckulyl30b0011wx6qc792a1bh","tag_id":"ckulyl2zo0002wx6q4dtxenta","_id":"ckulyl30i001hwx6q8hxbei8a"},{"post_id":"ckulyl30c0014wx6qhz159umq","tag_id":"ckulyl2zo0002wx6q4dtxenta","_id":"ckulyl30j001lwx6qgkcwgf3u"},{"post_id":"ckulyl30h001fwx6qa9tb5bz5","tag_id":"ckulyl2zo0002wx6q4dtxenta","_id":"ckulyl30l001pwx6q94t49cz3"},{"post_id":"ckulyl30i001iwx6q7y3d2z9q","tag_id":"ckulyl2zo0002wx6q4dtxenta","_id":"ckulyl30m001twx6qhosk2xi9"},{"post_id":"ckulyl30e0017wx6q510c8ho5","tag_id":"ckulyl30h001dwx6q4hphecy8","_id":"ckulyl30n001wwx6q2akh014m"},{"post_id":"ckulyl30l001qwx6qdk8wafj9","tag_id":"ckulyl2zo0002wx6q4dtxenta","_id":"ckulyl30n001ywx6q4ic1drb3"},{"post_id":"ckulyl30f001awx6qbywr2x6t","tag_id":"ckulyl30h001dwx6q4hphecy8","_id":"ckulyl30o0020wx6q9mychl5m"},{"post_id":"ckulyl30k001mwx6q97kien1p","tag_id":"ckulyl30m001uwx6q2k0100mf","_id":"ckulyl30o0022wx6qbluih767"}],"Tag":[{"name":"编程","_id":"ckulyl2zo0002wx6q4dtxenta"},{"name":"博客搭建","_id":"ckulyl30h001dwx6q4hphecy8"},{"name":"电脑使用技巧","_id":"ckulyl30m001uwx6q2k0100mf"}]}}